// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: moneydashboard/v4/currencies.proto

package mdv4

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Currency struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                 string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Symbol               string                 `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	DisplayPrecision     int32                  `protobuf:"varint,4,opt,name=display_precision,json=displayPrecision,proto3" json:"display_precision,omitempty"`
	CalculationPrecision int32                  `protobuf:"varint,5,opt,name=calculation_precision,json=calculationPrecision,proto3" json:"calculation_precision,omitempty"`
	Active               bool                   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Currency) Reset() {
	*x = Currency{}
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_moneydashboard_v4_currencies_proto_rawDescGZIP(), []int{0}
}

func (x *Currency) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Currency) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Currency) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Currency) GetDisplayPrecision() int32 {
	if x != nil {
		return x.DisplayPrecision
	}
	return 0
}

func (x *Currency) GetCalculationPrecision() int32 {
	if x != nil {
		return x.CalculationPrecision
	}
	return 0
}

func (x *Currency) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type CurrencyRate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CurrencyId    string                 `protobuf:"bytes,2,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	Date          int64                  `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Rate          float64                `protobuf:"fixed64,4,opt,name=rate,proto3" json:"rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrencyRate) Reset() {
	*x = CurrencyRate{}
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyRate) ProtoMessage() {}

func (x *CurrencyRate) ProtoReflect() protoreflect.Message {
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyRate.ProtoReflect.Descriptor instead.
func (*CurrencyRate) Descriptor() ([]byte, []int) {
	return file_moneydashboard_v4_currencies_proto_rawDescGZIP(), []int{1}
}

func (x *CurrencyRate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CurrencyRate) GetCurrencyId() string {
	if x != nil {
		return x.CurrencyId
	}
	return ""
}

func (x *CurrencyRate) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *CurrencyRate) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type GetCurrencyByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCurrencyByIdRequest) Reset() {
	*x = GetCurrencyByIdRequest{}
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrencyByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyByIdRequest) ProtoMessage() {}

func (x *GetCurrencyByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyByIdRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyByIdRequest) Descriptor() ([]byte, []int) {
	return file_moneydashboard_v4_currencies_proto_rawDescGZIP(), []int{2}
}

func (x *GetCurrencyByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCurrencyByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Currency      *Currency              `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCurrencyByIdResponse) Reset() {
	*x = GetCurrencyByIdResponse{}
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrencyByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyByIdResponse) ProtoMessage() {}

func (x *GetCurrencyByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyByIdResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyByIdResponse) Descriptor() ([]byte, []int) {
	return file_moneydashboard_v4_currencies_proto_rawDescGZIP(), []int{3}
}

func (x *GetCurrencyByIdResponse) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

type GetAllCurrenciesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllCurrenciesRequest) Reset() {
	*x = GetAllCurrenciesRequest{}
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCurrenciesRequest) ProtoMessage() {}

func (x *GetAllCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*GetAllCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_moneydashboard_v4_currencies_proto_rawDescGZIP(), []int{4}
}

type GetAllCurrenciesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Currencies    []*Currency            `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllCurrenciesResponse) Reset() {
	*x = GetAllCurrenciesResponse{}
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCurrenciesResponse) ProtoMessage() {}

func (x *GetAllCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*GetAllCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_moneydashboard_v4_currencies_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllCurrenciesResponse) GetCurrencies() []*Currency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

type UpsertCurrencyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Currency      *Currency              `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertCurrencyRequest) Reset() {
	*x = UpsertCurrencyRequest{}
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCurrencyRequest) ProtoMessage() {}

func (x *UpsertCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCurrencyRequest.ProtoReflect.Descriptor instead.
func (*UpsertCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_moneydashboard_v4_currencies_proto_rawDescGZIP(), []int{6}
}

func (x *UpsertCurrencyRequest) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

type UpsertCurrencyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertCurrencyResponse) Reset() {
	*x = UpsertCurrencyResponse{}
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCurrencyResponse) ProtoMessage() {}

func (x *UpsertCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCurrencyResponse.ProtoReflect.Descriptor instead.
func (*UpsertCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_moneydashboard_v4_currencies_proto_rawDescGZIP(), []int{7}
}

type GetLatestCurrencyRatesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatestCurrencyRatesRequest) Reset() {
	*x = GetLatestCurrencyRatesRequest{}
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestCurrencyRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestCurrencyRatesRequest) ProtoMessage() {}

func (x *GetLatestCurrencyRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestCurrencyRatesRequest.ProtoReflect.Descriptor instead.
func (*GetLatestCurrencyRatesRequest) Descriptor() ([]byte, []int) {
	return file_moneydashboard_v4_currencies_proto_rawDescGZIP(), []int{8}
}

type GetLatestCurrencyRatesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrencyRates []*CurrencyRate        `protobuf:"bytes,1,rep,name=currency_rates,json=currencyRates,proto3" json:"currency_rates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatestCurrencyRatesResponse) Reset() {
	*x = GetLatestCurrencyRatesResponse{}
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestCurrencyRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestCurrencyRatesResponse) ProtoMessage() {}

func (x *GetLatestCurrencyRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestCurrencyRatesResponse.ProtoReflect.Descriptor instead.
func (*GetLatestCurrencyRatesResponse) Descriptor() ([]byte, []int) {
	return file_moneydashboard_v4_currencies_proto_rawDescGZIP(), []int{9}
}

func (x *GetLatestCurrencyRatesResponse) GetCurrencyRates() []*CurrencyRate {
	if x != nil {
		return x.CurrencyRates
	}
	return nil
}

type UpsertCurrencyRateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rate          *CurrencyRate          `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertCurrencyRateRequest) Reset() {
	*x = UpsertCurrencyRateRequest{}
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertCurrencyRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCurrencyRateRequest) ProtoMessage() {}

func (x *UpsertCurrencyRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCurrencyRateRequest.ProtoReflect.Descriptor instead.
func (*UpsertCurrencyRateRequest) Descriptor() ([]byte, []int) {
	return file_moneydashboard_v4_currencies_proto_rawDescGZIP(), []int{10}
}

func (x *UpsertCurrencyRateRequest) GetRate() *CurrencyRate {
	if x != nil {
		return x.Rate
	}
	return nil
}

type UpsertCurrencyRateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertCurrencyRateResponse) Reset() {
	*x = UpsertCurrencyRateResponse{}
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertCurrencyRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCurrencyRateResponse) ProtoMessage() {}

func (x *UpsertCurrencyRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moneydashboard_v4_currencies_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCurrencyRateResponse.ProtoReflect.Descriptor instead.
func (*UpsertCurrencyRateResponse) Descriptor() ([]byte, []int) {
	return file_moneydashboard_v4_currencies_proto_rawDescGZIP(), []int{11}
}

var File_moneydashboard_v4_currencies_proto protoreflect.FileDescriptor

var file_moneydashboard_v4_currencies_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2f, 0x76, 0x34, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x22, 0xc0, 0x01, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x15, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x67, 0x0a, 0x0c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x68, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x19,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0x1c,
	0x0a, 0x1a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc3, 0x04, 0x0a,
	0x11, 0x4d, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x68, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x79, 0x49, 0x64, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x34, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x2e, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x71, 0x0a, 0x12, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x34, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x6f, 0x72, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x72, 0x2f, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x34,
	0x3b, 0x6d, 0x64, 0x76, 0x34, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_moneydashboard_v4_currencies_proto_rawDescOnce sync.Once
	file_moneydashboard_v4_currencies_proto_rawDescData = file_moneydashboard_v4_currencies_proto_rawDesc
)

func file_moneydashboard_v4_currencies_proto_rawDescGZIP() []byte {
	file_moneydashboard_v4_currencies_proto_rawDescOnce.Do(func() {
		file_moneydashboard_v4_currencies_proto_rawDescData = protoimpl.X.CompressGZIP(file_moneydashboard_v4_currencies_proto_rawDescData)
	})
	return file_moneydashboard_v4_currencies_proto_rawDescData
}

var file_moneydashboard_v4_currencies_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_moneydashboard_v4_currencies_proto_goTypes = []any{
	(*Currency)(nil),                       // 0: moneydashboard.v4.Currency
	(*CurrencyRate)(nil),                   // 1: moneydashboard.v4.CurrencyRate
	(*GetCurrencyByIdRequest)(nil),         // 2: moneydashboard.v4.GetCurrencyByIdRequest
	(*GetCurrencyByIdResponse)(nil),        // 3: moneydashboard.v4.GetCurrencyByIdResponse
	(*GetAllCurrenciesRequest)(nil),        // 4: moneydashboard.v4.GetAllCurrenciesRequest
	(*GetAllCurrenciesResponse)(nil),       // 5: moneydashboard.v4.GetAllCurrenciesResponse
	(*UpsertCurrencyRequest)(nil),          // 6: moneydashboard.v4.UpsertCurrencyRequest
	(*UpsertCurrencyResponse)(nil),         // 7: moneydashboard.v4.UpsertCurrencyResponse
	(*GetLatestCurrencyRatesRequest)(nil),  // 8: moneydashboard.v4.GetLatestCurrencyRatesRequest
	(*GetLatestCurrencyRatesResponse)(nil), // 9: moneydashboard.v4.GetLatestCurrencyRatesResponse
	(*UpsertCurrencyRateRequest)(nil),      // 10: moneydashboard.v4.UpsertCurrencyRateRequest
	(*UpsertCurrencyRateResponse)(nil),     // 11: moneydashboard.v4.UpsertCurrencyRateResponse
}
var file_moneydashboard_v4_currencies_proto_depIdxs = []int32{
	0,  // 0: moneydashboard.v4.GetCurrencyByIdResponse.currency:type_name -> moneydashboard.v4.Currency
	0,  // 1: moneydashboard.v4.GetAllCurrenciesResponse.currencies:type_name -> moneydashboard.v4.Currency
	0,  // 2: moneydashboard.v4.UpsertCurrencyRequest.currency:type_name -> moneydashboard.v4.Currency
	1,  // 3: moneydashboard.v4.GetLatestCurrencyRatesResponse.currency_rates:type_name -> moneydashboard.v4.CurrencyRate
	1,  // 4: moneydashboard.v4.UpsertCurrencyRateRequest.rate:type_name -> moneydashboard.v4.CurrencyRate
	2,  // 5: moneydashboard.v4.MDCurrencyService.GetCurrencyById:input_type -> moneydashboard.v4.GetCurrencyByIdRequest
	4,  // 6: moneydashboard.v4.MDCurrencyService.GetAllCurrencies:input_type -> moneydashboard.v4.GetAllCurrenciesRequest
	6,  // 7: moneydashboard.v4.MDCurrencyService.UpsertCurrency:input_type -> moneydashboard.v4.UpsertCurrencyRequest
	8,  // 8: moneydashboard.v4.MDCurrencyService.GetLatestCurrencyRates:input_type -> moneydashboard.v4.GetLatestCurrencyRatesRequest
	10, // 9: moneydashboard.v4.MDCurrencyService.UpsertCurrencyRate:input_type -> moneydashboard.v4.UpsertCurrencyRateRequest
	3,  // 10: moneydashboard.v4.MDCurrencyService.GetCurrencyById:output_type -> moneydashboard.v4.GetCurrencyByIdResponse
	5,  // 11: moneydashboard.v4.MDCurrencyService.GetAllCurrencies:output_type -> moneydashboard.v4.GetAllCurrenciesResponse
	7,  // 12: moneydashboard.v4.MDCurrencyService.UpsertCurrency:output_type -> moneydashboard.v4.UpsertCurrencyResponse
	9,  // 13: moneydashboard.v4.MDCurrencyService.GetLatestCurrencyRates:output_type -> moneydashboard.v4.GetLatestCurrencyRatesResponse
	11, // 14: moneydashboard.v4.MDCurrencyService.UpsertCurrencyRate:output_type -> moneydashboard.v4.UpsertCurrencyRateResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_moneydashboard_v4_currencies_proto_init() }
func file_moneydashboard_v4_currencies_proto_init() {
	if File_moneydashboard_v4_currencies_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_moneydashboard_v4_currencies_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_moneydashboard_v4_currencies_proto_goTypes,
		DependencyIndexes: file_moneydashboard_v4_currencies_proto_depIdxs,
		MessageInfos:      file_moneydashboard_v4_currencies_proto_msgTypes,
	}.Build()
	File_moneydashboard_v4_currencies_proto = out.File
	file_moneydashboard_v4_currencies_proto_rawDesc = nil
	file_moneydashboard_v4_currencies_proto_goTypes = nil
	file_moneydashboard_v4_currencies_proto_depIdxs = nil
}
