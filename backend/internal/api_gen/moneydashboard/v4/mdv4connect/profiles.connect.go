// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: moneydashboard/v4/profiles.proto

package mdv4connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v4 "github.com/markormesher/money-dashboard/internal/api_gen/moneydashboard/v4"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MDProfileServiceName is the fully-qualified name of the MDProfileService service.
	MDProfileServiceName = "moneydashboard.v4.MDProfileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MDProfileServiceGetProfileByIdProcedure is the fully-qualified name of the MDProfileService's
	// GetProfileById RPC.
	MDProfileServiceGetProfileByIdProcedure = "/moneydashboard.v4.MDProfileService/GetProfileById"
	// MDProfileServiceGetAllProfilesProcedure is the fully-qualified name of the MDProfileService's
	// GetAllProfiles RPC.
	MDProfileServiceGetAllProfilesProcedure = "/moneydashboard.v4.MDProfileService/GetAllProfiles"
	// MDProfileServiceUpsertProfileProcedure is the fully-qualified name of the MDProfileService's
	// UpsertProfile RPC.
	MDProfileServiceUpsertProfileProcedure = "/moneydashboard.v4.MDProfileService/UpsertProfile"
)

// MDProfileServiceClient is a client for the moneydashboard.v4.MDProfileService service.
type MDProfileServiceClient interface {
	GetProfileById(context.Context, *connect.Request[v4.GetProfileByIdRequest]) (*connect.Response[v4.GetProfileByIdResponse], error)
	GetAllProfiles(context.Context, *connect.Request[v4.GetAllProfilesRequest]) (*connect.Response[v4.GetAllProfilesResponse], error)
	UpsertProfile(context.Context, *connect.Request[v4.UpsertProfileRequest]) (*connect.Response[v4.UpsertProfileResponse], error)
}

// NewMDProfileServiceClient constructs a client for the moneydashboard.v4.MDProfileService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMDProfileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MDProfileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mDProfileServiceMethods := v4.File_moneydashboard_v4_profiles_proto.Services().ByName("MDProfileService").Methods()
	return &mDProfileServiceClient{
		getProfileById: connect.NewClient[v4.GetProfileByIdRequest, v4.GetProfileByIdResponse](
			httpClient,
			baseURL+MDProfileServiceGetProfileByIdProcedure,
			connect.WithSchema(mDProfileServiceMethods.ByName("GetProfileById")),
			connect.WithClientOptions(opts...),
		),
		getAllProfiles: connect.NewClient[v4.GetAllProfilesRequest, v4.GetAllProfilesResponse](
			httpClient,
			baseURL+MDProfileServiceGetAllProfilesProcedure,
			connect.WithSchema(mDProfileServiceMethods.ByName("GetAllProfiles")),
			connect.WithClientOptions(opts...),
		),
		upsertProfile: connect.NewClient[v4.UpsertProfileRequest, v4.UpsertProfileResponse](
			httpClient,
			baseURL+MDProfileServiceUpsertProfileProcedure,
			connect.WithSchema(mDProfileServiceMethods.ByName("UpsertProfile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mDProfileServiceClient implements MDProfileServiceClient.
type mDProfileServiceClient struct {
	getProfileById *connect.Client[v4.GetProfileByIdRequest, v4.GetProfileByIdResponse]
	getAllProfiles *connect.Client[v4.GetAllProfilesRequest, v4.GetAllProfilesResponse]
	upsertProfile  *connect.Client[v4.UpsertProfileRequest, v4.UpsertProfileResponse]
}

// GetProfileById calls moneydashboard.v4.MDProfileService.GetProfileById.
func (c *mDProfileServiceClient) GetProfileById(ctx context.Context, req *connect.Request[v4.GetProfileByIdRequest]) (*connect.Response[v4.GetProfileByIdResponse], error) {
	return c.getProfileById.CallUnary(ctx, req)
}

// GetAllProfiles calls moneydashboard.v4.MDProfileService.GetAllProfiles.
func (c *mDProfileServiceClient) GetAllProfiles(ctx context.Context, req *connect.Request[v4.GetAllProfilesRequest]) (*connect.Response[v4.GetAllProfilesResponse], error) {
	return c.getAllProfiles.CallUnary(ctx, req)
}

// UpsertProfile calls moneydashboard.v4.MDProfileService.UpsertProfile.
func (c *mDProfileServiceClient) UpsertProfile(ctx context.Context, req *connect.Request[v4.UpsertProfileRequest]) (*connect.Response[v4.UpsertProfileResponse], error) {
	return c.upsertProfile.CallUnary(ctx, req)
}

// MDProfileServiceHandler is an implementation of the moneydashboard.v4.MDProfileService service.
type MDProfileServiceHandler interface {
	GetProfileById(context.Context, *connect.Request[v4.GetProfileByIdRequest]) (*connect.Response[v4.GetProfileByIdResponse], error)
	GetAllProfiles(context.Context, *connect.Request[v4.GetAllProfilesRequest]) (*connect.Response[v4.GetAllProfilesResponse], error)
	UpsertProfile(context.Context, *connect.Request[v4.UpsertProfileRequest]) (*connect.Response[v4.UpsertProfileResponse], error)
}

// NewMDProfileServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMDProfileServiceHandler(svc MDProfileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mDProfileServiceMethods := v4.File_moneydashboard_v4_profiles_proto.Services().ByName("MDProfileService").Methods()
	mDProfileServiceGetProfileByIdHandler := connect.NewUnaryHandler(
		MDProfileServiceGetProfileByIdProcedure,
		svc.GetProfileById,
		connect.WithSchema(mDProfileServiceMethods.ByName("GetProfileById")),
		connect.WithHandlerOptions(opts...),
	)
	mDProfileServiceGetAllProfilesHandler := connect.NewUnaryHandler(
		MDProfileServiceGetAllProfilesProcedure,
		svc.GetAllProfiles,
		connect.WithSchema(mDProfileServiceMethods.ByName("GetAllProfiles")),
		connect.WithHandlerOptions(opts...),
	)
	mDProfileServiceUpsertProfileHandler := connect.NewUnaryHandler(
		MDProfileServiceUpsertProfileProcedure,
		svc.UpsertProfile,
		connect.WithSchema(mDProfileServiceMethods.ByName("UpsertProfile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/moneydashboard.v4.MDProfileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MDProfileServiceGetProfileByIdProcedure:
			mDProfileServiceGetProfileByIdHandler.ServeHTTP(w, r)
		case MDProfileServiceGetAllProfilesProcedure:
			mDProfileServiceGetAllProfilesHandler.ServeHTTP(w, r)
		case MDProfileServiceUpsertProfileProcedure:
			mDProfileServiceUpsertProfileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMDProfileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMDProfileServiceHandler struct{}

func (UnimplementedMDProfileServiceHandler) GetProfileById(context.Context, *connect.Request[v4.GetProfileByIdRequest]) (*connect.Response[v4.GetProfileByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDProfileService.GetProfileById is not implemented"))
}

func (UnimplementedMDProfileServiceHandler) GetAllProfiles(context.Context, *connect.Request[v4.GetAllProfilesRequest]) (*connect.Response[v4.GetAllProfilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDProfileService.GetAllProfiles is not implemented"))
}

func (UnimplementedMDProfileServiceHandler) UpsertProfile(context.Context, *connect.Request[v4.UpsertProfileRequest]) (*connect.Response[v4.UpsertProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDProfileService.UpsertProfile is not implemented"))
}
