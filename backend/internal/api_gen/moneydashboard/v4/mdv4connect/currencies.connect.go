// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: moneydashboard/v4/currencies.proto

package mdv4connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v4 "github.com/markormesher/money-dashboard/internal/api_gen/moneydashboard/v4"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MDCurrencyServiceName is the fully-qualified name of the MDCurrencyService service.
	MDCurrencyServiceName = "moneydashboard.v4.MDCurrencyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MDCurrencyServiceGetAllCurrenciesProcedure is the fully-qualified name of the MDCurrencyService's
	// GetAllCurrencies RPC.
	MDCurrencyServiceGetAllCurrenciesProcedure = "/moneydashboard.v4.MDCurrencyService/GetAllCurrencies"
	// MDCurrencyServiceGetLatestCurrencyRatesProcedure is the fully-qualified name of the
	// MDCurrencyService's GetLatestCurrencyRates RPC.
	MDCurrencyServiceGetLatestCurrencyRatesProcedure = "/moneydashboard.v4.MDCurrencyService/GetLatestCurrencyRates"
)

// MDCurrencyServiceClient is a client for the moneydashboard.v4.MDCurrencyService service.
type MDCurrencyServiceClient interface {
	GetAllCurrencies(context.Context, *connect.Request[v4.GetAllCurrenciesRequest]) (*connect.Response[v4.GetAllCurrenciesResponse], error)
	GetLatestCurrencyRates(context.Context, *connect.Request[v4.GetLatestCurrencyRatesRequest]) (*connect.Response[v4.GetLatestCurrencyRatesResponse], error)
}

// NewMDCurrencyServiceClient constructs a client for the moneydashboard.v4.MDCurrencyService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMDCurrencyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MDCurrencyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mDCurrencyServiceMethods := v4.File_moneydashboard_v4_currencies_proto.Services().ByName("MDCurrencyService").Methods()
	return &mDCurrencyServiceClient{
		getAllCurrencies: connect.NewClient[v4.GetAllCurrenciesRequest, v4.GetAllCurrenciesResponse](
			httpClient,
			baseURL+MDCurrencyServiceGetAllCurrenciesProcedure,
			connect.WithSchema(mDCurrencyServiceMethods.ByName("GetAllCurrencies")),
			connect.WithClientOptions(opts...),
		),
		getLatestCurrencyRates: connect.NewClient[v4.GetLatestCurrencyRatesRequest, v4.GetLatestCurrencyRatesResponse](
			httpClient,
			baseURL+MDCurrencyServiceGetLatestCurrencyRatesProcedure,
			connect.WithSchema(mDCurrencyServiceMethods.ByName("GetLatestCurrencyRates")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mDCurrencyServiceClient implements MDCurrencyServiceClient.
type mDCurrencyServiceClient struct {
	getAllCurrencies       *connect.Client[v4.GetAllCurrenciesRequest, v4.GetAllCurrenciesResponse]
	getLatestCurrencyRates *connect.Client[v4.GetLatestCurrencyRatesRequest, v4.GetLatestCurrencyRatesResponse]
}

// GetAllCurrencies calls moneydashboard.v4.MDCurrencyService.GetAllCurrencies.
func (c *mDCurrencyServiceClient) GetAllCurrencies(ctx context.Context, req *connect.Request[v4.GetAllCurrenciesRequest]) (*connect.Response[v4.GetAllCurrenciesResponse], error) {
	return c.getAllCurrencies.CallUnary(ctx, req)
}

// GetLatestCurrencyRates calls moneydashboard.v4.MDCurrencyService.GetLatestCurrencyRates.
func (c *mDCurrencyServiceClient) GetLatestCurrencyRates(ctx context.Context, req *connect.Request[v4.GetLatestCurrencyRatesRequest]) (*connect.Response[v4.GetLatestCurrencyRatesResponse], error) {
	return c.getLatestCurrencyRates.CallUnary(ctx, req)
}

// MDCurrencyServiceHandler is an implementation of the moneydashboard.v4.MDCurrencyService service.
type MDCurrencyServiceHandler interface {
	GetAllCurrencies(context.Context, *connect.Request[v4.GetAllCurrenciesRequest]) (*connect.Response[v4.GetAllCurrenciesResponse], error)
	GetLatestCurrencyRates(context.Context, *connect.Request[v4.GetLatestCurrencyRatesRequest]) (*connect.Response[v4.GetLatestCurrencyRatesResponse], error)
}

// NewMDCurrencyServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMDCurrencyServiceHandler(svc MDCurrencyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mDCurrencyServiceMethods := v4.File_moneydashboard_v4_currencies_proto.Services().ByName("MDCurrencyService").Methods()
	mDCurrencyServiceGetAllCurrenciesHandler := connect.NewUnaryHandler(
		MDCurrencyServiceGetAllCurrenciesProcedure,
		svc.GetAllCurrencies,
		connect.WithSchema(mDCurrencyServiceMethods.ByName("GetAllCurrencies")),
		connect.WithHandlerOptions(opts...),
	)
	mDCurrencyServiceGetLatestCurrencyRatesHandler := connect.NewUnaryHandler(
		MDCurrencyServiceGetLatestCurrencyRatesProcedure,
		svc.GetLatestCurrencyRates,
		connect.WithSchema(mDCurrencyServiceMethods.ByName("GetLatestCurrencyRates")),
		connect.WithHandlerOptions(opts...),
	)
	return "/moneydashboard.v4.MDCurrencyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MDCurrencyServiceGetAllCurrenciesProcedure:
			mDCurrencyServiceGetAllCurrenciesHandler.ServeHTTP(w, r)
		case MDCurrencyServiceGetLatestCurrencyRatesProcedure:
			mDCurrencyServiceGetLatestCurrencyRatesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMDCurrencyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMDCurrencyServiceHandler struct{}

func (UnimplementedMDCurrencyServiceHandler) GetAllCurrencies(context.Context, *connect.Request[v4.GetAllCurrenciesRequest]) (*connect.Response[v4.GetAllCurrenciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDCurrencyService.GetAllCurrencies is not implemented"))
}

func (UnimplementedMDCurrencyServiceHandler) GetLatestCurrencyRates(context.Context, *connect.Request[v4.GetLatestCurrencyRatesRequest]) (*connect.Response[v4.GetLatestCurrencyRatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDCurrencyService.GetLatestCurrencyRates is not implemented"))
}
