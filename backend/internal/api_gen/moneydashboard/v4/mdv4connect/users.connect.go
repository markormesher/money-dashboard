// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: moneydashboard/v4/users.proto

package mdv4connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v4 "github.com/markormesher/money-dashboard/internal/api_gen/moneydashboard/v4"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MDUserServiceName is the fully-qualified name of the MDUserService service.
	MDUserServiceName = "moneydashboard.v4.MDUserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MDUserServiceGetUserProcedure is the fully-qualified name of the MDUserService's GetUser RPC.
	MDUserServiceGetUserProcedure = "/moneydashboard.v4.MDUserService/GetUser"
	// MDUserServiceSetActiveProfileProcedure is the fully-qualified name of the MDUserService's
	// SetActiveProfile RPC.
	MDUserServiceSetActiveProfileProcedure = "/moneydashboard.v4.MDUserService/SetActiveProfile"
)

// MDUserServiceClient is a client for the moneydashboard.v4.MDUserService service.
type MDUserServiceClient interface {
	GetUser(context.Context, *connect.Request[v4.GetUserRequest]) (*connect.Response[v4.GetUserResponse], error)
	SetActiveProfile(context.Context, *connect.Request[v4.SetActiveProfileRequest]) (*connect.Response[v4.SetActiveProfileResponse], error)
}

// NewMDUserServiceClient constructs a client for the moneydashboard.v4.MDUserService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMDUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MDUserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mDUserServiceMethods := v4.File_moneydashboard_v4_users_proto.Services().ByName("MDUserService").Methods()
	return &mDUserServiceClient{
		getUser: connect.NewClient[v4.GetUserRequest, v4.GetUserResponse](
			httpClient,
			baseURL+MDUserServiceGetUserProcedure,
			connect.WithSchema(mDUserServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		setActiveProfile: connect.NewClient[v4.SetActiveProfileRequest, v4.SetActiveProfileResponse](
			httpClient,
			baseURL+MDUserServiceSetActiveProfileProcedure,
			connect.WithSchema(mDUserServiceMethods.ByName("SetActiveProfile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mDUserServiceClient implements MDUserServiceClient.
type mDUserServiceClient struct {
	getUser          *connect.Client[v4.GetUserRequest, v4.GetUserResponse]
	setActiveProfile *connect.Client[v4.SetActiveProfileRequest, v4.SetActiveProfileResponse]
}

// GetUser calls moneydashboard.v4.MDUserService.GetUser.
func (c *mDUserServiceClient) GetUser(ctx context.Context, req *connect.Request[v4.GetUserRequest]) (*connect.Response[v4.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// SetActiveProfile calls moneydashboard.v4.MDUserService.SetActiveProfile.
func (c *mDUserServiceClient) SetActiveProfile(ctx context.Context, req *connect.Request[v4.SetActiveProfileRequest]) (*connect.Response[v4.SetActiveProfileResponse], error) {
	return c.setActiveProfile.CallUnary(ctx, req)
}

// MDUserServiceHandler is an implementation of the moneydashboard.v4.MDUserService service.
type MDUserServiceHandler interface {
	GetUser(context.Context, *connect.Request[v4.GetUserRequest]) (*connect.Response[v4.GetUserResponse], error)
	SetActiveProfile(context.Context, *connect.Request[v4.SetActiveProfileRequest]) (*connect.Response[v4.SetActiveProfileResponse], error)
}

// NewMDUserServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMDUserServiceHandler(svc MDUserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mDUserServiceMethods := v4.File_moneydashboard_v4_users_proto.Services().ByName("MDUserService").Methods()
	mDUserServiceGetUserHandler := connect.NewUnaryHandler(
		MDUserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(mDUserServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	mDUserServiceSetActiveProfileHandler := connect.NewUnaryHandler(
		MDUserServiceSetActiveProfileProcedure,
		svc.SetActiveProfile,
		connect.WithSchema(mDUserServiceMethods.ByName("SetActiveProfile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/moneydashboard.v4.MDUserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MDUserServiceGetUserProcedure:
			mDUserServiceGetUserHandler.ServeHTTP(w, r)
		case MDUserServiceSetActiveProfileProcedure:
			mDUserServiceSetActiveProfileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMDUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMDUserServiceHandler struct{}

func (UnimplementedMDUserServiceHandler) GetUser(context.Context, *connect.Request[v4.GetUserRequest]) (*connect.Response[v4.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDUserService.GetUser is not implemented"))
}

func (UnimplementedMDUserServiceHandler) SetActiveProfile(context.Context, *connect.Request[v4.SetActiveProfileRequest]) (*connect.Response[v4.SetActiveProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDUserService.SetActiveProfile is not implemented"))
}
