// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: moneydashboard/v4/moneydashboard.proto

package mdv4connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v4 "github.com/markormesher/money-dashboard/internal/api_gen/moneydashboard/v4"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MDServiceName is the fully-qualified name of the MDService service.
	MDServiceName = "moneydashboard.v4.MDService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MDServiceGetUserProcedure is the fully-qualified name of the MDService's GetUser RPC.
	MDServiceGetUserProcedure = "/moneydashboard.v4.MDService/GetUser"
	// MDServiceGetProfilesProcedure is the fully-qualified name of the MDService's GetProfiles RPC.
	MDServiceGetProfilesProcedure = "/moneydashboard.v4.MDService/GetProfiles"
	// MDServiceSetActiveProfileProcedure is the fully-qualified name of the MDService's
	// SetActiveProfile RPC.
	MDServiceSetActiveProfileProcedure = "/moneydashboard.v4.MDService/SetActiveProfile"
)

// MDServiceClient is a client for the moneydashboard.v4.MDService service.
type MDServiceClient interface {
	GetUser(context.Context, *connect.Request[v4.GetUserRequest]) (*connect.Response[v4.GetUserResponse], error)
	GetProfiles(context.Context, *connect.Request[v4.GetProfilesRequest]) (*connect.Response[v4.GetProfilesResponse], error)
	SetActiveProfile(context.Context, *connect.Request[v4.SetActiveProfileRequest]) (*connect.Response[v4.SetActiveProfileResponse], error)
}

// NewMDServiceClient constructs a client for the moneydashboard.v4.MDService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMDServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MDServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mDServiceMethods := v4.File_moneydashboard_v4_moneydashboard_proto.Services().ByName("MDService").Methods()
	return &mDServiceClient{
		getUser: connect.NewClient[v4.GetUserRequest, v4.GetUserResponse](
			httpClient,
			baseURL+MDServiceGetUserProcedure,
			connect.WithSchema(mDServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		getProfiles: connect.NewClient[v4.GetProfilesRequest, v4.GetProfilesResponse](
			httpClient,
			baseURL+MDServiceGetProfilesProcedure,
			connect.WithSchema(mDServiceMethods.ByName("GetProfiles")),
			connect.WithClientOptions(opts...),
		),
		setActiveProfile: connect.NewClient[v4.SetActiveProfileRequest, v4.SetActiveProfileResponse](
			httpClient,
			baseURL+MDServiceSetActiveProfileProcedure,
			connect.WithSchema(mDServiceMethods.ByName("SetActiveProfile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mDServiceClient implements MDServiceClient.
type mDServiceClient struct {
	getUser          *connect.Client[v4.GetUserRequest, v4.GetUserResponse]
	getProfiles      *connect.Client[v4.GetProfilesRequest, v4.GetProfilesResponse]
	setActiveProfile *connect.Client[v4.SetActiveProfileRequest, v4.SetActiveProfileResponse]
}

// GetUser calls moneydashboard.v4.MDService.GetUser.
func (c *mDServiceClient) GetUser(ctx context.Context, req *connect.Request[v4.GetUserRequest]) (*connect.Response[v4.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// GetProfiles calls moneydashboard.v4.MDService.GetProfiles.
func (c *mDServiceClient) GetProfiles(ctx context.Context, req *connect.Request[v4.GetProfilesRequest]) (*connect.Response[v4.GetProfilesResponse], error) {
	return c.getProfiles.CallUnary(ctx, req)
}

// SetActiveProfile calls moneydashboard.v4.MDService.SetActiveProfile.
func (c *mDServiceClient) SetActiveProfile(ctx context.Context, req *connect.Request[v4.SetActiveProfileRequest]) (*connect.Response[v4.SetActiveProfileResponse], error) {
	return c.setActiveProfile.CallUnary(ctx, req)
}

// MDServiceHandler is an implementation of the moneydashboard.v4.MDService service.
type MDServiceHandler interface {
	GetUser(context.Context, *connect.Request[v4.GetUserRequest]) (*connect.Response[v4.GetUserResponse], error)
	GetProfiles(context.Context, *connect.Request[v4.GetProfilesRequest]) (*connect.Response[v4.GetProfilesResponse], error)
	SetActiveProfile(context.Context, *connect.Request[v4.SetActiveProfileRequest]) (*connect.Response[v4.SetActiveProfileResponse], error)
}

// NewMDServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMDServiceHandler(svc MDServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mDServiceMethods := v4.File_moneydashboard_v4_moneydashboard_proto.Services().ByName("MDService").Methods()
	mDServiceGetUserHandler := connect.NewUnaryHandler(
		MDServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(mDServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	mDServiceGetProfilesHandler := connect.NewUnaryHandler(
		MDServiceGetProfilesProcedure,
		svc.GetProfiles,
		connect.WithSchema(mDServiceMethods.ByName("GetProfiles")),
		connect.WithHandlerOptions(opts...),
	)
	mDServiceSetActiveProfileHandler := connect.NewUnaryHandler(
		MDServiceSetActiveProfileProcedure,
		svc.SetActiveProfile,
		connect.WithSchema(mDServiceMethods.ByName("SetActiveProfile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/moneydashboard.v4.MDService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MDServiceGetUserProcedure:
			mDServiceGetUserHandler.ServeHTTP(w, r)
		case MDServiceGetProfilesProcedure:
			mDServiceGetProfilesHandler.ServeHTTP(w, r)
		case MDServiceSetActiveProfileProcedure:
			mDServiceSetActiveProfileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMDServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMDServiceHandler struct{}

func (UnimplementedMDServiceHandler) GetUser(context.Context, *connect.Request[v4.GetUserRequest]) (*connect.Response[v4.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDService.GetUser is not implemented"))
}

func (UnimplementedMDServiceHandler) GetProfiles(context.Context, *connect.Request[v4.GetProfilesRequest]) (*connect.Response[v4.GetProfilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDService.GetProfiles is not implemented"))
}

func (UnimplementedMDServiceHandler) SetActiveProfile(context.Context, *connect.Request[v4.SetActiveProfileRequest]) (*connect.Response[v4.SetActiveProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDService.SetActiveProfile is not implemented"))
}
