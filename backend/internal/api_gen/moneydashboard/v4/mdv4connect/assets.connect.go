// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: moneydashboard/v4/assets.proto

package mdv4connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v4 "github.com/markormesher/money-dashboard/internal/api_gen/moneydashboard/v4"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MDAssetServiceName is the fully-qualified name of the MDAssetService service.
	MDAssetServiceName = "moneydashboard.v4.MDAssetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MDAssetServiceGetAssetByIdProcedure is the fully-qualified name of the MDAssetService's
	// GetAssetById RPC.
	MDAssetServiceGetAssetByIdProcedure = "/moneydashboard.v4.MDAssetService/GetAssetById"
	// MDAssetServiceGetAllAssetsProcedure is the fully-qualified name of the MDAssetService's
	// GetAllAssets RPC.
	MDAssetServiceGetAllAssetsProcedure = "/moneydashboard.v4.MDAssetService/GetAllAssets"
	// MDAssetServiceUpsertAssetProcedure is the fully-qualified name of the MDAssetService's
	// UpsertAsset RPC.
	MDAssetServiceUpsertAssetProcedure = "/moneydashboard.v4.MDAssetService/UpsertAsset"
)

// MDAssetServiceClient is a client for the moneydashboard.v4.MDAssetService service.
type MDAssetServiceClient interface {
	GetAssetById(context.Context, *connect.Request[v4.GetAssetByIdRequest]) (*connect.Response[v4.GetAssetByIdResponse], error)
	GetAllAssets(context.Context, *connect.Request[v4.GetAllAssetsRequest]) (*connect.Response[v4.GetAllAssetsResponse], error)
	UpsertAsset(context.Context, *connect.Request[v4.UpsertAssetRequest]) (*connect.Response[v4.UpsertAssetResponse], error)
}

// NewMDAssetServiceClient constructs a client for the moneydashboard.v4.MDAssetService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMDAssetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MDAssetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mDAssetServiceMethods := v4.File_moneydashboard_v4_assets_proto.Services().ByName("MDAssetService").Methods()
	return &mDAssetServiceClient{
		getAssetById: connect.NewClient[v4.GetAssetByIdRequest, v4.GetAssetByIdResponse](
			httpClient,
			baseURL+MDAssetServiceGetAssetByIdProcedure,
			connect.WithSchema(mDAssetServiceMethods.ByName("GetAssetById")),
			connect.WithClientOptions(opts...),
		),
		getAllAssets: connect.NewClient[v4.GetAllAssetsRequest, v4.GetAllAssetsResponse](
			httpClient,
			baseURL+MDAssetServiceGetAllAssetsProcedure,
			connect.WithSchema(mDAssetServiceMethods.ByName("GetAllAssets")),
			connect.WithClientOptions(opts...),
		),
		upsertAsset: connect.NewClient[v4.UpsertAssetRequest, v4.UpsertAssetResponse](
			httpClient,
			baseURL+MDAssetServiceUpsertAssetProcedure,
			connect.WithSchema(mDAssetServiceMethods.ByName("UpsertAsset")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mDAssetServiceClient implements MDAssetServiceClient.
type mDAssetServiceClient struct {
	getAssetById *connect.Client[v4.GetAssetByIdRequest, v4.GetAssetByIdResponse]
	getAllAssets *connect.Client[v4.GetAllAssetsRequest, v4.GetAllAssetsResponse]
	upsertAsset  *connect.Client[v4.UpsertAssetRequest, v4.UpsertAssetResponse]
}

// GetAssetById calls moneydashboard.v4.MDAssetService.GetAssetById.
func (c *mDAssetServiceClient) GetAssetById(ctx context.Context, req *connect.Request[v4.GetAssetByIdRequest]) (*connect.Response[v4.GetAssetByIdResponse], error) {
	return c.getAssetById.CallUnary(ctx, req)
}

// GetAllAssets calls moneydashboard.v4.MDAssetService.GetAllAssets.
func (c *mDAssetServiceClient) GetAllAssets(ctx context.Context, req *connect.Request[v4.GetAllAssetsRequest]) (*connect.Response[v4.GetAllAssetsResponse], error) {
	return c.getAllAssets.CallUnary(ctx, req)
}

// UpsertAsset calls moneydashboard.v4.MDAssetService.UpsertAsset.
func (c *mDAssetServiceClient) UpsertAsset(ctx context.Context, req *connect.Request[v4.UpsertAssetRequest]) (*connect.Response[v4.UpsertAssetResponse], error) {
	return c.upsertAsset.CallUnary(ctx, req)
}

// MDAssetServiceHandler is an implementation of the moneydashboard.v4.MDAssetService service.
type MDAssetServiceHandler interface {
	GetAssetById(context.Context, *connect.Request[v4.GetAssetByIdRequest]) (*connect.Response[v4.GetAssetByIdResponse], error)
	GetAllAssets(context.Context, *connect.Request[v4.GetAllAssetsRequest]) (*connect.Response[v4.GetAllAssetsResponse], error)
	UpsertAsset(context.Context, *connect.Request[v4.UpsertAssetRequest]) (*connect.Response[v4.UpsertAssetResponse], error)
}

// NewMDAssetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMDAssetServiceHandler(svc MDAssetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mDAssetServiceMethods := v4.File_moneydashboard_v4_assets_proto.Services().ByName("MDAssetService").Methods()
	mDAssetServiceGetAssetByIdHandler := connect.NewUnaryHandler(
		MDAssetServiceGetAssetByIdProcedure,
		svc.GetAssetById,
		connect.WithSchema(mDAssetServiceMethods.ByName("GetAssetById")),
		connect.WithHandlerOptions(opts...),
	)
	mDAssetServiceGetAllAssetsHandler := connect.NewUnaryHandler(
		MDAssetServiceGetAllAssetsProcedure,
		svc.GetAllAssets,
		connect.WithSchema(mDAssetServiceMethods.ByName("GetAllAssets")),
		connect.WithHandlerOptions(opts...),
	)
	mDAssetServiceUpsertAssetHandler := connect.NewUnaryHandler(
		MDAssetServiceUpsertAssetProcedure,
		svc.UpsertAsset,
		connect.WithSchema(mDAssetServiceMethods.ByName("UpsertAsset")),
		connect.WithHandlerOptions(opts...),
	)
	return "/moneydashboard.v4.MDAssetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MDAssetServiceGetAssetByIdProcedure:
			mDAssetServiceGetAssetByIdHandler.ServeHTTP(w, r)
		case MDAssetServiceGetAllAssetsProcedure:
			mDAssetServiceGetAllAssetsHandler.ServeHTTP(w, r)
		case MDAssetServiceUpsertAssetProcedure:
			mDAssetServiceUpsertAssetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMDAssetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMDAssetServiceHandler struct{}

func (UnimplementedMDAssetServiceHandler) GetAssetById(context.Context, *connect.Request[v4.GetAssetByIdRequest]) (*connect.Response[v4.GetAssetByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDAssetService.GetAssetById is not implemented"))
}

func (UnimplementedMDAssetServiceHandler) GetAllAssets(context.Context, *connect.Request[v4.GetAllAssetsRequest]) (*connect.Response[v4.GetAllAssetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDAssetService.GetAllAssets is not implemented"))
}

func (UnimplementedMDAssetServiceHandler) UpsertAsset(context.Context, *connect.Request[v4.UpsertAssetRequest]) (*connect.Response[v4.UpsertAssetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDAssetService.UpsertAsset is not implemented"))
}
