// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: moneydashboard/v4/account_groups.proto

package mdv4connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v4 "github.com/markormesher/money-dashboard/internal/api_gen/moneydashboard/v4"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MDAccountGroupServiceName is the fully-qualified name of the MDAccountGroupService service.
	MDAccountGroupServiceName = "moneydashboard.v4.MDAccountGroupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MDAccountGroupServiceGetAccountGroupByIdProcedure is the fully-qualified name of the
	// MDAccountGroupService's GetAccountGroupById RPC.
	MDAccountGroupServiceGetAccountGroupByIdProcedure = "/moneydashboard.v4.MDAccountGroupService/GetAccountGroupById"
	// MDAccountGroupServiceGetAllAccountGroupsProcedure is the fully-qualified name of the
	// MDAccountGroupService's GetAllAccountGroups RPC.
	MDAccountGroupServiceGetAllAccountGroupsProcedure = "/moneydashboard.v4.MDAccountGroupService/GetAllAccountGroups"
	// MDAccountGroupServiceUpsertAccountGroupProcedure is the fully-qualified name of the
	// MDAccountGroupService's UpsertAccountGroup RPC.
	MDAccountGroupServiceUpsertAccountGroupProcedure = "/moneydashboard.v4.MDAccountGroupService/UpsertAccountGroup"
)

// MDAccountGroupServiceClient is a client for the moneydashboard.v4.MDAccountGroupService service.
type MDAccountGroupServiceClient interface {
	GetAccountGroupById(context.Context, *connect.Request[v4.GetAccountGroupByIdRequest]) (*connect.Response[v4.GetAccountGroupByIdResponse], error)
	GetAllAccountGroups(context.Context, *connect.Request[v4.GetAllAccountGroupsRequest]) (*connect.Response[v4.GetAllAccountGroupsResponse], error)
	UpsertAccountGroup(context.Context, *connect.Request[v4.UpsertAccountGroupRequest]) (*connect.Response[v4.UpsertAccountGroupResponse], error)
}

// NewMDAccountGroupServiceClient constructs a client for the
// moneydashboard.v4.MDAccountGroupService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMDAccountGroupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MDAccountGroupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mDAccountGroupServiceMethods := v4.File_moneydashboard_v4_account_groups_proto.Services().ByName("MDAccountGroupService").Methods()
	return &mDAccountGroupServiceClient{
		getAccountGroupById: connect.NewClient[v4.GetAccountGroupByIdRequest, v4.GetAccountGroupByIdResponse](
			httpClient,
			baseURL+MDAccountGroupServiceGetAccountGroupByIdProcedure,
			connect.WithSchema(mDAccountGroupServiceMethods.ByName("GetAccountGroupById")),
			connect.WithClientOptions(opts...),
		),
		getAllAccountGroups: connect.NewClient[v4.GetAllAccountGroupsRequest, v4.GetAllAccountGroupsResponse](
			httpClient,
			baseURL+MDAccountGroupServiceGetAllAccountGroupsProcedure,
			connect.WithSchema(mDAccountGroupServiceMethods.ByName("GetAllAccountGroups")),
			connect.WithClientOptions(opts...),
		),
		upsertAccountGroup: connect.NewClient[v4.UpsertAccountGroupRequest, v4.UpsertAccountGroupResponse](
			httpClient,
			baseURL+MDAccountGroupServiceUpsertAccountGroupProcedure,
			connect.WithSchema(mDAccountGroupServiceMethods.ByName("UpsertAccountGroup")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mDAccountGroupServiceClient implements MDAccountGroupServiceClient.
type mDAccountGroupServiceClient struct {
	getAccountGroupById *connect.Client[v4.GetAccountGroupByIdRequest, v4.GetAccountGroupByIdResponse]
	getAllAccountGroups *connect.Client[v4.GetAllAccountGroupsRequest, v4.GetAllAccountGroupsResponse]
	upsertAccountGroup  *connect.Client[v4.UpsertAccountGroupRequest, v4.UpsertAccountGroupResponse]
}

// GetAccountGroupById calls moneydashboard.v4.MDAccountGroupService.GetAccountGroupById.
func (c *mDAccountGroupServiceClient) GetAccountGroupById(ctx context.Context, req *connect.Request[v4.GetAccountGroupByIdRequest]) (*connect.Response[v4.GetAccountGroupByIdResponse], error) {
	return c.getAccountGroupById.CallUnary(ctx, req)
}

// GetAllAccountGroups calls moneydashboard.v4.MDAccountGroupService.GetAllAccountGroups.
func (c *mDAccountGroupServiceClient) GetAllAccountGroups(ctx context.Context, req *connect.Request[v4.GetAllAccountGroupsRequest]) (*connect.Response[v4.GetAllAccountGroupsResponse], error) {
	return c.getAllAccountGroups.CallUnary(ctx, req)
}

// UpsertAccountGroup calls moneydashboard.v4.MDAccountGroupService.UpsertAccountGroup.
func (c *mDAccountGroupServiceClient) UpsertAccountGroup(ctx context.Context, req *connect.Request[v4.UpsertAccountGroupRequest]) (*connect.Response[v4.UpsertAccountGroupResponse], error) {
	return c.upsertAccountGroup.CallUnary(ctx, req)
}

// MDAccountGroupServiceHandler is an implementation of the moneydashboard.v4.MDAccountGroupService
// service.
type MDAccountGroupServiceHandler interface {
	GetAccountGroupById(context.Context, *connect.Request[v4.GetAccountGroupByIdRequest]) (*connect.Response[v4.GetAccountGroupByIdResponse], error)
	GetAllAccountGroups(context.Context, *connect.Request[v4.GetAllAccountGroupsRequest]) (*connect.Response[v4.GetAllAccountGroupsResponse], error)
	UpsertAccountGroup(context.Context, *connect.Request[v4.UpsertAccountGroupRequest]) (*connect.Response[v4.UpsertAccountGroupResponse], error)
}

// NewMDAccountGroupServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMDAccountGroupServiceHandler(svc MDAccountGroupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mDAccountGroupServiceMethods := v4.File_moneydashboard_v4_account_groups_proto.Services().ByName("MDAccountGroupService").Methods()
	mDAccountGroupServiceGetAccountGroupByIdHandler := connect.NewUnaryHandler(
		MDAccountGroupServiceGetAccountGroupByIdProcedure,
		svc.GetAccountGroupById,
		connect.WithSchema(mDAccountGroupServiceMethods.ByName("GetAccountGroupById")),
		connect.WithHandlerOptions(opts...),
	)
	mDAccountGroupServiceGetAllAccountGroupsHandler := connect.NewUnaryHandler(
		MDAccountGroupServiceGetAllAccountGroupsProcedure,
		svc.GetAllAccountGroups,
		connect.WithSchema(mDAccountGroupServiceMethods.ByName("GetAllAccountGroups")),
		connect.WithHandlerOptions(opts...),
	)
	mDAccountGroupServiceUpsertAccountGroupHandler := connect.NewUnaryHandler(
		MDAccountGroupServiceUpsertAccountGroupProcedure,
		svc.UpsertAccountGroup,
		connect.WithSchema(mDAccountGroupServiceMethods.ByName("UpsertAccountGroup")),
		connect.WithHandlerOptions(opts...),
	)
	return "/moneydashboard.v4.MDAccountGroupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MDAccountGroupServiceGetAccountGroupByIdProcedure:
			mDAccountGroupServiceGetAccountGroupByIdHandler.ServeHTTP(w, r)
		case MDAccountGroupServiceGetAllAccountGroupsProcedure:
			mDAccountGroupServiceGetAllAccountGroupsHandler.ServeHTTP(w, r)
		case MDAccountGroupServiceUpsertAccountGroupProcedure:
			mDAccountGroupServiceUpsertAccountGroupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMDAccountGroupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMDAccountGroupServiceHandler struct{}

func (UnimplementedMDAccountGroupServiceHandler) GetAccountGroupById(context.Context, *connect.Request[v4.GetAccountGroupByIdRequest]) (*connect.Response[v4.GetAccountGroupByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDAccountGroupService.GetAccountGroupById is not implemented"))
}

func (UnimplementedMDAccountGroupServiceHandler) GetAllAccountGroups(context.Context, *connect.Request[v4.GetAllAccountGroupsRequest]) (*connect.Response[v4.GetAllAccountGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDAccountGroupService.GetAllAccountGroups is not implemented"))
}

func (UnimplementedMDAccountGroupServiceHandler) UpsertAccountGroup(context.Context, *connect.Request[v4.UpsertAccountGroupRequest]) (*connect.Response[v4.UpsertAccountGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDAccountGroupService.UpsertAccountGroup is not implemented"))
}
