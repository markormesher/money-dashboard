// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: moneydashboard/v4/transactions.proto

package mdv4connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v4 "github.com/markormesher/money-dashboard/internal/api_gen/moneydashboard/v4"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MDTransactionServiceName is the fully-qualified name of the MDTransactionService service.
	MDTransactionServiceName = "moneydashboard.v4.MDTransactionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MDTransactionServiceGetTransactionByIdProcedure is the fully-qualified name of the
	// MDTransactionService's GetTransactionById RPC.
	MDTransactionServiceGetTransactionByIdProcedure = "/moneydashboard.v4.MDTransactionService/GetTransactionById"
	// MDTransactionServiceGetTransactionPageProcedure is the fully-qualified name of the
	// MDTransactionService's GetTransactionPage RPC.
	MDTransactionServiceGetTransactionPageProcedure = "/moneydashboard.v4.MDTransactionService/GetTransactionPage"
	// MDTransactionServiceUpsertTransactionProcedure is the fully-qualified name of the
	// MDTransactionService's UpsertTransaction RPC.
	MDTransactionServiceUpsertTransactionProcedure = "/moneydashboard.v4.MDTransactionService/UpsertTransaction"
	// MDTransactionServiceDeleteTransactionProcedure is the fully-qualified name of the
	// MDTransactionService's DeleteTransaction RPC.
	MDTransactionServiceDeleteTransactionProcedure = "/moneydashboard.v4.MDTransactionService/DeleteTransaction"
	// MDTransactionServiceGetPayeesProcedure is the fully-qualified name of the MDTransactionService's
	// GetPayees RPC.
	MDTransactionServiceGetPayeesProcedure = "/moneydashboard.v4.MDTransactionService/GetPayees"
)

// MDTransactionServiceClient is a client for the moneydashboard.v4.MDTransactionService service.
type MDTransactionServiceClient interface {
	GetTransactionById(context.Context, *connect.Request[v4.GetTransactionByIdRequest]) (*connect.Response[v4.GetTransactionByIdResponse], error)
	GetTransactionPage(context.Context, *connect.Request[v4.GetTransactionPageRequest]) (*connect.Response[v4.GetTransactionPageResponse], error)
	UpsertTransaction(context.Context, *connect.Request[v4.UpsertTransactionRequest]) (*connect.Response[v4.UpsertTransactionResponse], error)
	DeleteTransaction(context.Context, *connect.Request[v4.DeleteTransactionRequest]) (*connect.Response[v4.DeleteTransactionResponse], error)
	GetPayees(context.Context, *connect.Request[v4.GetPayeesRequest]) (*connect.Response[v4.GetPayeesResponse], error)
}

// NewMDTransactionServiceClient constructs a client for the moneydashboard.v4.MDTransactionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMDTransactionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MDTransactionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mDTransactionServiceMethods := v4.File_moneydashboard_v4_transactions_proto.Services().ByName("MDTransactionService").Methods()
	return &mDTransactionServiceClient{
		getTransactionById: connect.NewClient[v4.GetTransactionByIdRequest, v4.GetTransactionByIdResponse](
			httpClient,
			baseURL+MDTransactionServiceGetTransactionByIdProcedure,
			connect.WithSchema(mDTransactionServiceMethods.ByName("GetTransactionById")),
			connect.WithClientOptions(opts...),
		),
		getTransactionPage: connect.NewClient[v4.GetTransactionPageRequest, v4.GetTransactionPageResponse](
			httpClient,
			baseURL+MDTransactionServiceGetTransactionPageProcedure,
			connect.WithSchema(mDTransactionServiceMethods.ByName("GetTransactionPage")),
			connect.WithClientOptions(opts...),
		),
		upsertTransaction: connect.NewClient[v4.UpsertTransactionRequest, v4.UpsertTransactionResponse](
			httpClient,
			baseURL+MDTransactionServiceUpsertTransactionProcedure,
			connect.WithSchema(mDTransactionServiceMethods.ByName("UpsertTransaction")),
			connect.WithClientOptions(opts...),
		),
		deleteTransaction: connect.NewClient[v4.DeleteTransactionRequest, v4.DeleteTransactionResponse](
			httpClient,
			baseURL+MDTransactionServiceDeleteTransactionProcedure,
			connect.WithSchema(mDTransactionServiceMethods.ByName("DeleteTransaction")),
			connect.WithClientOptions(opts...),
		),
		getPayees: connect.NewClient[v4.GetPayeesRequest, v4.GetPayeesResponse](
			httpClient,
			baseURL+MDTransactionServiceGetPayeesProcedure,
			connect.WithSchema(mDTransactionServiceMethods.ByName("GetPayees")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mDTransactionServiceClient implements MDTransactionServiceClient.
type mDTransactionServiceClient struct {
	getTransactionById *connect.Client[v4.GetTransactionByIdRequest, v4.GetTransactionByIdResponse]
	getTransactionPage *connect.Client[v4.GetTransactionPageRequest, v4.GetTransactionPageResponse]
	upsertTransaction  *connect.Client[v4.UpsertTransactionRequest, v4.UpsertTransactionResponse]
	deleteTransaction  *connect.Client[v4.DeleteTransactionRequest, v4.DeleteTransactionResponse]
	getPayees          *connect.Client[v4.GetPayeesRequest, v4.GetPayeesResponse]
}

// GetTransactionById calls moneydashboard.v4.MDTransactionService.GetTransactionById.
func (c *mDTransactionServiceClient) GetTransactionById(ctx context.Context, req *connect.Request[v4.GetTransactionByIdRequest]) (*connect.Response[v4.GetTransactionByIdResponse], error) {
	return c.getTransactionById.CallUnary(ctx, req)
}

// GetTransactionPage calls moneydashboard.v4.MDTransactionService.GetTransactionPage.
func (c *mDTransactionServiceClient) GetTransactionPage(ctx context.Context, req *connect.Request[v4.GetTransactionPageRequest]) (*connect.Response[v4.GetTransactionPageResponse], error) {
	return c.getTransactionPage.CallUnary(ctx, req)
}

// UpsertTransaction calls moneydashboard.v4.MDTransactionService.UpsertTransaction.
func (c *mDTransactionServiceClient) UpsertTransaction(ctx context.Context, req *connect.Request[v4.UpsertTransactionRequest]) (*connect.Response[v4.UpsertTransactionResponse], error) {
	return c.upsertTransaction.CallUnary(ctx, req)
}

// DeleteTransaction calls moneydashboard.v4.MDTransactionService.DeleteTransaction.
func (c *mDTransactionServiceClient) DeleteTransaction(ctx context.Context, req *connect.Request[v4.DeleteTransactionRequest]) (*connect.Response[v4.DeleteTransactionResponse], error) {
	return c.deleteTransaction.CallUnary(ctx, req)
}

// GetPayees calls moneydashboard.v4.MDTransactionService.GetPayees.
func (c *mDTransactionServiceClient) GetPayees(ctx context.Context, req *connect.Request[v4.GetPayeesRequest]) (*connect.Response[v4.GetPayeesResponse], error) {
	return c.getPayees.CallUnary(ctx, req)
}

// MDTransactionServiceHandler is an implementation of the moneydashboard.v4.MDTransactionService
// service.
type MDTransactionServiceHandler interface {
	GetTransactionById(context.Context, *connect.Request[v4.GetTransactionByIdRequest]) (*connect.Response[v4.GetTransactionByIdResponse], error)
	GetTransactionPage(context.Context, *connect.Request[v4.GetTransactionPageRequest]) (*connect.Response[v4.GetTransactionPageResponse], error)
	UpsertTransaction(context.Context, *connect.Request[v4.UpsertTransactionRequest]) (*connect.Response[v4.UpsertTransactionResponse], error)
	DeleteTransaction(context.Context, *connect.Request[v4.DeleteTransactionRequest]) (*connect.Response[v4.DeleteTransactionResponse], error)
	GetPayees(context.Context, *connect.Request[v4.GetPayeesRequest]) (*connect.Response[v4.GetPayeesResponse], error)
}

// NewMDTransactionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMDTransactionServiceHandler(svc MDTransactionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mDTransactionServiceMethods := v4.File_moneydashboard_v4_transactions_proto.Services().ByName("MDTransactionService").Methods()
	mDTransactionServiceGetTransactionByIdHandler := connect.NewUnaryHandler(
		MDTransactionServiceGetTransactionByIdProcedure,
		svc.GetTransactionById,
		connect.WithSchema(mDTransactionServiceMethods.ByName("GetTransactionById")),
		connect.WithHandlerOptions(opts...),
	)
	mDTransactionServiceGetTransactionPageHandler := connect.NewUnaryHandler(
		MDTransactionServiceGetTransactionPageProcedure,
		svc.GetTransactionPage,
		connect.WithSchema(mDTransactionServiceMethods.ByName("GetTransactionPage")),
		connect.WithHandlerOptions(opts...),
	)
	mDTransactionServiceUpsertTransactionHandler := connect.NewUnaryHandler(
		MDTransactionServiceUpsertTransactionProcedure,
		svc.UpsertTransaction,
		connect.WithSchema(mDTransactionServiceMethods.ByName("UpsertTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	mDTransactionServiceDeleteTransactionHandler := connect.NewUnaryHandler(
		MDTransactionServiceDeleteTransactionProcedure,
		svc.DeleteTransaction,
		connect.WithSchema(mDTransactionServiceMethods.ByName("DeleteTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	mDTransactionServiceGetPayeesHandler := connect.NewUnaryHandler(
		MDTransactionServiceGetPayeesProcedure,
		svc.GetPayees,
		connect.WithSchema(mDTransactionServiceMethods.ByName("GetPayees")),
		connect.WithHandlerOptions(opts...),
	)
	return "/moneydashboard.v4.MDTransactionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MDTransactionServiceGetTransactionByIdProcedure:
			mDTransactionServiceGetTransactionByIdHandler.ServeHTTP(w, r)
		case MDTransactionServiceGetTransactionPageProcedure:
			mDTransactionServiceGetTransactionPageHandler.ServeHTTP(w, r)
		case MDTransactionServiceUpsertTransactionProcedure:
			mDTransactionServiceUpsertTransactionHandler.ServeHTTP(w, r)
		case MDTransactionServiceDeleteTransactionProcedure:
			mDTransactionServiceDeleteTransactionHandler.ServeHTTP(w, r)
		case MDTransactionServiceGetPayeesProcedure:
			mDTransactionServiceGetPayeesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMDTransactionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMDTransactionServiceHandler struct{}

func (UnimplementedMDTransactionServiceHandler) GetTransactionById(context.Context, *connect.Request[v4.GetTransactionByIdRequest]) (*connect.Response[v4.GetTransactionByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDTransactionService.GetTransactionById is not implemented"))
}

func (UnimplementedMDTransactionServiceHandler) GetTransactionPage(context.Context, *connect.Request[v4.GetTransactionPageRequest]) (*connect.Response[v4.GetTransactionPageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDTransactionService.GetTransactionPage is not implemented"))
}

func (UnimplementedMDTransactionServiceHandler) UpsertTransaction(context.Context, *connect.Request[v4.UpsertTransactionRequest]) (*connect.Response[v4.UpsertTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDTransactionService.UpsertTransaction is not implemented"))
}

func (UnimplementedMDTransactionServiceHandler) DeleteTransaction(context.Context, *connect.Request[v4.DeleteTransactionRequest]) (*connect.Response[v4.DeleteTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDTransactionService.DeleteTransaction is not implemented"))
}

func (UnimplementedMDTransactionServiceHandler) GetPayees(context.Context, *connect.Request[v4.GetPayeesRequest]) (*connect.Response[v4.GetPayeesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDTransactionService.GetPayees is not implemented"))
}
