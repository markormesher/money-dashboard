// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: moneydashboard/v4/categories.proto

package mdv4connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v4 "github.com/markormesher/money-dashboard/internal/api_gen/moneydashboard/v4"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MDCategoryServiceName is the fully-qualified name of the MDCategoryService service.
	MDCategoryServiceName = "moneydashboard.v4.MDCategoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MDCategoryServiceGetCategoryByIdProcedure is the fully-qualified name of the MDCategoryService's
	// GetCategoryById RPC.
	MDCategoryServiceGetCategoryByIdProcedure = "/moneydashboard.v4.MDCategoryService/GetCategoryById"
	// MDCategoryServiceGetAllCategoriesProcedure is the fully-qualified name of the MDCategoryService's
	// GetAllCategories RPC.
	MDCategoryServiceGetAllCategoriesProcedure = "/moneydashboard.v4.MDCategoryService/GetAllCategories"
	// MDCategoryServiceUpsertCategoryProcedure is the fully-qualified name of the MDCategoryService's
	// UpsertCategory RPC.
	MDCategoryServiceUpsertCategoryProcedure = "/moneydashboard.v4.MDCategoryService/UpsertCategory"
)

// MDCategoryServiceClient is a client for the moneydashboard.v4.MDCategoryService service.
type MDCategoryServiceClient interface {
	GetCategoryById(context.Context, *connect.Request[v4.GetCategoryByIdRequest]) (*connect.Response[v4.GetCategoryByIdResponse], error)
	GetAllCategories(context.Context, *connect.Request[v4.GetAllCategoriesRequest]) (*connect.Response[v4.GetAllCategoriesResponse], error)
	UpsertCategory(context.Context, *connect.Request[v4.UpsertCategoryRequest]) (*connect.Response[v4.UpsertCategoryResponse], error)
}

// NewMDCategoryServiceClient constructs a client for the moneydashboard.v4.MDCategoryService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMDCategoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MDCategoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mDCategoryServiceMethods := v4.File_moneydashboard_v4_categories_proto.Services().ByName("MDCategoryService").Methods()
	return &mDCategoryServiceClient{
		getCategoryById: connect.NewClient[v4.GetCategoryByIdRequest, v4.GetCategoryByIdResponse](
			httpClient,
			baseURL+MDCategoryServiceGetCategoryByIdProcedure,
			connect.WithSchema(mDCategoryServiceMethods.ByName("GetCategoryById")),
			connect.WithClientOptions(opts...),
		),
		getAllCategories: connect.NewClient[v4.GetAllCategoriesRequest, v4.GetAllCategoriesResponse](
			httpClient,
			baseURL+MDCategoryServiceGetAllCategoriesProcedure,
			connect.WithSchema(mDCategoryServiceMethods.ByName("GetAllCategories")),
			connect.WithClientOptions(opts...),
		),
		upsertCategory: connect.NewClient[v4.UpsertCategoryRequest, v4.UpsertCategoryResponse](
			httpClient,
			baseURL+MDCategoryServiceUpsertCategoryProcedure,
			connect.WithSchema(mDCategoryServiceMethods.ByName("UpsertCategory")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mDCategoryServiceClient implements MDCategoryServiceClient.
type mDCategoryServiceClient struct {
	getCategoryById  *connect.Client[v4.GetCategoryByIdRequest, v4.GetCategoryByIdResponse]
	getAllCategories *connect.Client[v4.GetAllCategoriesRequest, v4.GetAllCategoriesResponse]
	upsertCategory   *connect.Client[v4.UpsertCategoryRequest, v4.UpsertCategoryResponse]
}

// GetCategoryById calls moneydashboard.v4.MDCategoryService.GetCategoryById.
func (c *mDCategoryServiceClient) GetCategoryById(ctx context.Context, req *connect.Request[v4.GetCategoryByIdRequest]) (*connect.Response[v4.GetCategoryByIdResponse], error) {
	return c.getCategoryById.CallUnary(ctx, req)
}

// GetAllCategories calls moneydashboard.v4.MDCategoryService.GetAllCategories.
func (c *mDCategoryServiceClient) GetAllCategories(ctx context.Context, req *connect.Request[v4.GetAllCategoriesRequest]) (*connect.Response[v4.GetAllCategoriesResponse], error) {
	return c.getAllCategories.CallUnary(ctx, req)
}

// UpsertCategory calls moneydashboard.v4.MDCategoryService.UpsertCategory.
func (c *mDCategoryServiceClient) UpsertCategory(ctx context.Context, req *connect.Request[v4.UpsertCategoryRequest]) (*connect.Response[v4.UpsertCategoryResponse], error) {
	return c.upsertCategory.CallUnary(ctx, req)
}

// MDCategoryServiceHandler is an implementation of the moneydashboard.v4.MDCategoryService service.
type MDCategoryServiceHandler interface {
	GetCategoryById(context.Context, *connect.Request[v4.GetCategoryByIdRequest]) (*connect.Response[v4.GetCategoryByIdResponse], error)
	GetAllCategories(context.Context, *connect.Request[v4.GetAllCategoriesRequest]) (*connect.Response[v4.GetAllCategoriesResponse], error)
	UpsertCategory(context.Context, *connect.Request[v4.UpsertCategoryRequest]) (*connect.Response[v4.UpsertCategoryResponse], error)
}

// NewMDCategoryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMDCategoryServiceHandler(svc MDCategoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mDCategoryServiceMethods := v4.File_moneydashboard_v4_categories_proto.Services().ByName("MDCategoryService").Methods()
	mDCategoryServiceGetCategoryByIdHandler := connect.NewUnaryHandler(
		MDCategoryServiceGetCategoryByIdProcedure,
		svc.GetCategoryById,
		connect.WithSchema(mDCategoryServiceMethods.ByName("GetCategoryById")),
		connect.WithHandlerOptions(opts...),
	)
	mDCategoryServiceGetAllCategoriesHandler := connect.NewUnaryHandler(
		MDCategoryServiceGetAllCategoriesProcedure,
		svc.GetAllCategories,
		connect.WithSchema(mDCategoryServiceMethods.ByName("GetAllCategories")),
		connect.WithHandlerOptions(opts...),
	)
	mDCategoryServiceUpsertCategoryHandler := connect.NewUnaryHandler(
		MDCategoryServiceUpsertCategoryProcedure,
		svc.UpsertCategory,
		connect.WithSchema(mDCategoryServiceMethods.ByName("UpsertCategory")),
		connect.WithHandlerOptions(opts...),
	)
	return "/moneydashboard.v4.MDCategoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MDCategoryServiceGetCategoryByIdProcedure:
			mDCategoryServiceGetCategoryByIdHandler.ServeHTTP(w, r)
		case MDCategoryServiceGetAllCategoriesProcedure:
			mDCategoryServiceGetAllCategoriesHandler.ServeHTTP(w, r)
		case MDCategoryServiceUpsertCategoryProcedure:
			mDCategoryServiceUpsertCategoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMDCategoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMDCategoryServiceHandler struct{}

func (UnimplementedMDCategoryServiceHandler) GetCategoryById(context.Context, *connect.Request[v4.GetCategoryByIdRequest]) (*connect.Response[v4.GetCategoryByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDCategoryService.GetCategoryById is not implemented"))
}

func (UnimplementedMDCategoryServiceHandler) GetAllCategories(context.Context, *connect.Request[v4.GetAllCategoriesRequest]) (*connect.Response[v4.GetAllCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDCategoryService.GetAllCategories is not implemented"))
}

func (UnimplementedMDCategoryServiceHandler) UpsertCategory(context.Context, *connect.Request[v4.UpsertCategoryRequest]) (*connect.Response[v4.UpsertCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDCategoryService.UpsertCategory is not implemented"))
}
