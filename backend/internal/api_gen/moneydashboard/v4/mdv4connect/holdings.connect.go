// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: moneydashboard/v4/holdings.proto

package mdv4connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v4 "github.com/markormesher/money-dashboard/internal/api_gen/moneydashboard/v4"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MDHoldingServiceName is the fully-qualified name of the MDHoldingService service.
	MDHoldingServiceName = "moneydashboard.v4.MDHoldingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MDHoldingServiceGetHoldingByIdProcedure is the fully-qualified name of the MDHoldingService's
	// GetHoldingById RPC.
	MDHoldingServiceGetHoldingByIdProcedure = "/moneydashboard.v4.MDHoldingService/GetHoldingById"
	// MDHoldingServiceGetAllHoldingsProcedure is the fully-qualified name of the MDHoldingService's
	// GetAllHoldings RPC.
	MDHoldingServiceGetAllHoldingsProcedure = "/moneydashboard.v4.MDHoldingService/GetAllHoldings"
	// MDHoldingServiceUpsertHoldingProcedure is the fully-qualified name of the MDHoldingService's
	// UpsertHolding RPC.
	MDHoldingServiceUpsertHoldingProcedure = "/moneydashboard.v4.MDHoldingService/UpsertHolding"
)

// MDHoldingServiceClient is a client for the moneydashboard.v4.MDHoldingService service.
type MDHoldingServiceClient interface {
	GetHoldingById(context.Context, *connect.Request[v4.GetHoldingByIdRequest]) (*connect.Response[v4.GetHoldingByIdResponse], error)
	GetAllHoldings(context.Context, *connect.Request[v4.GetAllHoldingsRequest]) (*connect.Response[v4.GetAllHoldingsResponse], error)
	UpsertHolding(context.Context, *connect.Request[v4.UpsertHoldingRequest]) (*connect.Response[v4.UpsertHoldingResponse], error)
}

// NewMDHoldingServiceClient constructs a client for the moneydashboard.v4.MDHoldingService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMDHoldingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MDHoldingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mDHoldingServiceMethods := v4.File_moneydashboard_v4_holdings_proto.Services().ByName("MDHoldingService").Methods()
	return &mDHoldingServiceClient{
		getHoldingById: connect.NewClient[v4.GetHoldingByIdRequest, v4.GetHoldingByIdResponse](
			httpClient,
			baseURL+MDHoldingServiceGetHoldingByIdProcedure,
			connect.WithSchema(mDHoldingServiceMethods.ByName("GetHoldingById")),
			connect.WithClientOptions(opts...),
		),
		getAllHoldings: connect.NewClient[v4.GetAllHoldingsRequest, v4.GetAllHoldingsResponse](
			httpClient,
			baseURL+MDHoldingServiceGetAllHoldingsProcedure,
			connect.WithSchema(mDHoldingServiceMethods.ByName("GetAllHoldings")),
			connect.WithClientOptions(opts...),
		),
		upsertHolding: connect.NewClient[v4.UpsertHoldingRequest, v4.UpsertHoldingResponse](
			httpClient,
			baseURL+MDHoldingServiceUpsertHoldingProcedure,
			connect.WithSchema(mDHoldingServiceMethods.ByName("UpsertHolding")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mDHoldingServiceClient implements MDHoldingServiceClient.
type mDHoldingServiceClient struct {
	getHoldingById *connect.Client[v4.GetHoldingByIdRequest, v4.GetHoldingByIdResponse]
	getAllHoldings *connect.Client[v4.GetAllHoldingsRequest, v4.GetAllHoldingsResponse]
	upsertHolding  *connect.Client[v4.UpsertHoldingRequest, v4.UpsertHoldingResponse]
}

// GetHoldingById calls moneydashboard.v4.MDHoldingService.GetHoldingById.
func (c *mDHoldingServiceClient) GetHoldingById(ctx context.Context, req *connect.Request[v4.GetHoldingByIdRequest]) (*connect.Response[v4.GetHoldingByIdResponse], error) {
	return c.getHoldingById.CallUnary(ctx, req)
}

// GetAllHoldings calls moneydashboard.v4.MDHoldingService.GetAllHoldings.
func (c *mDHoldingServiceClient) GetAllHoldings(ctx context.Context, req *connect.Request[v4.GetAllHoldingsRequest]) (*connect.Response[v4.GetAllHoldingsResponse], error) {
	return c.getAllHoldings.CallUnary(ctx, req)
}

// UpsertHolding calls moneydashboard.v4.MDHoldingService.UpsertHolding.
func (c *mDHoldingServiceClient) UpsertHolding(ctx context.Context, req *connect.Request[v4.UpsertHoldingRequest]) (*connect.Response[v4.UpsertHoldingResponse], error) {
	return c.upsertHolding.CallUnary(ctx, req)
}

// MDHoldingServiceHandler is an implementation of the moneydashboard.v4.MDHoldingService service.
type MDHoldingServiceHandler interface {
	GetHoldingById(context.Context, *connect.Request[v4.GetHoldingByIdRequest]) (*connect.Response[v4.GetHoldingByIdResponse], error)
	GetAllHoldings(context.Context, *connect.Request[v4.GetAllHoldingsRequest]) (*connect.Response[v4.GetAllHoldingsResponse], error)
	UpsertHolding(context.Context, *connect.Request[v4.UpsertHoldingRequest]) (*connect.Response[v4.UpsertHoldingResponse], error)
}

// NewMDHoldingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMDHoldingServiceHandler(svc MDHoldingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mDHoldingServiceMethods := v4.File_moneydashboard_v4_holdings_proto.Services().ByName("MDHoldingService").Methods()
	mDHoldingServiceGetHoldingByIdHandler := connect.NewUnaryHandler(
		MDHoldingServiceGetHoldingByIdProcedure,
		svc.GetHoldingById,
		connect.WithSchema(mDHoldingServiceMethods.ByName("GetHoldingById")),
		connect.WithHandlerOptions(opts...),
	)
	mDHoldingServiceGetAllHoldingsHandler := connect.NewUnaryHandler(
		MDHoldingServiceGetAllHoldingsProcedure,
		svc.GetAllHoldings,
		connect.WithSchema(mDHoldingServiceMethods.ByName("GetAllHoldings")),
		connect.WithHandlerOptions(opts...),
	)
	mDHoldingServiceUpsertHoldingHandler := connect.NewUnaryHandler(
		MDHoldingServiceUpsertHoldingProcedure,
		svc.UpsertHolding,
		connect.WithSchema(mDHoldingServiceMethods.ByName("UpsertHolding")),
		connect.WithHandlerOptions(opts...),
	)
	return "/moneydashboard.v4.MDHoldingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MDHoldingServiceGetHoldingByIdProcedure:
			mDHoldingServiceGetHoldingByIdHandler.ServeHTTP(w, r)
		case MDHoldingServiceGetAllHoldingsProcedure:
			mDHoldingServiceGetAllHoldingsHandler.ServeHTTP(w, r)
		case MDHoldingServiceUpsertHoldingProcedure:
			mDHoldingServiceUpsertHoldingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMDHoldingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMDHoldingServiceHandler struct{}

func (UnimplementedMDHoldingServiceHandler) GetHoldingById(context.Context, *connect.Request[v4.GetHoldingByIdRequest]) (*connect.Response[v4.GetHoldingByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDHoldingService.GetHoldingById is not implemented"))
}

func (UnimplementedMDHoldingServiceHandler) GetAllHoldings(context.Context, *connect.Request[v4.GetAllHoldingsRequest]) (*connect.Response[v4.GetAllHoldingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDHoldingService.GetAllHoldings is not implemented"))
}

func (UnimplementedMDHoldingServiceHandler) UpsertHolding(context.Context, *connect.Request[v4.UpsertHoldingRequest]) (*connect.Response[v4.UpsertHoldingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDHoldingService.UpsertHolding is not implemented"))
}
