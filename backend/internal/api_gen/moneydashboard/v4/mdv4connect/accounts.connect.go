// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: moneydashboard/v4/accounts.proto

package mdv4connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v4 "github.com/markormesher/money-dashboard/internal/api_gen/moneydashboard/v4"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MDAccountServiceName is the fully-qualified name of the MDAccountService service.
	MDAccountServiceName = "moneydashboard.v4.MDAccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MDAccountServiceGetAccountByIdProcedure is the fully-qualified name of the MDAccountService's
	// GetAccountById RPC.
	MDAccountServiceGetAccountByIdProcedure = "/moneydashboard.v4.MDAccountService/GetAccountById"
	// MDAccountServiceGetAllAccountsProcedure is the fully-qualified name of the MDAccountService's
	// GetAllAccounts RPC.
	MDAccountServiceGetAllAccountsProcedure = "/moneydashboard.v4.MDAccountService/GetAllAccounts"
	// MDAccountServiceUpsertAccountProcedure is the fully-qualified name of the MDAccountService's
	// UpsertAccount RPC.
	MDAccountServiceUpsertAccountProcedure = "/moneydashboard.v4.MDAccountService/UpsertAccount"
)

// MDAccountServiceClient is a client for the moneydashboard.v4.MDAccountService service.
type MDAccountServiceClient interface {
	GetAccountById(context.Context, *connect.Request[v4.GetAccountByIdRequest]) (*connect.Response[v4.GetAccountByIdResponse], error)
	GetAllAccounts(context.Context, *connect.Request[v4.GetAllAccountsRequest]) (*connect.Response[v4.GetAllAccountsResponse], error)
	UpsertAccount(context.Context, *connect.Request[v4.UpsertAccountRequest]) (*connect.Response[v4.UpsertAccountResponse], error)
}

// NewMDAccountServiceClient constructs a client for the moneydashboard.v4.MDAccountService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMDAccountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MDAccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mDAccountServiceMethods := v4.File_moneydashboard_v4_accounts_proto.Services().ByName("MDAccountService").Methods()
	return &mDAccountServiceClient{
		getAccountById: connect.NewClient[v4.GetAccountByIdRequest, v4.GetAccountByIdResponse](
			httpClient,
			baseURL+MDAccountServiceGetAccountByIdProcedure,
			connect.WithSchema(mDAccountServiceMethods.ByName("GetAccountById")),
			connect.WithClientOptions(opts...),
		),
		getAllAccounts: connect.NewClient[v4.GetAllAccountsRequest, v4.GetAllAccountsResponse](
			httpClient,
			baseURL+MDAccountServiceGetAllAccountsProcedure,
			connect.WithSchema(mDAccountServiceMethods.ByName("GetAllAccounts")),
			connect.WithClientOptions(opts...),
		),
		upsertAccount: connect.NewClient[v4.UpsertAccountRequest, v4.UpsertAccountResponse](
			httpClient,
			baseURL+MDAccountServiceUpsertAccountProcedure,
			connect.WithSchema(mDAccountServiceMethods.ByName("UpsertAccount")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mDAccountServiceClient implements MDAccountServiceClient.
type mDAccountServiceClient struct {
	getAccountById *connect.Client[v4.GetAccountByIdRequest, v4.GetAccountByIdResponse]
	getAllAccounts *connect.Client[v4.GetAllAccountsRequest, v4.GetAllAccountsResponse]
	upsertAccount  *connect.Client[v4.UpsertAccountRequest, v4.UpsertAccountResponse]
}

// GetAccountById calls moneydashboard.v4.MDAccountService.GetAccountById.
func (c *mDAccountServiceClient) GetAccountById(ctx context.Context, req *connect.Request[v4.GetAccountByIdRequest]) (*connect.Response[v4.GetAccountByIdResponse], error) {
	return c.getAccountById.CallUnary(ctx, req)
}

// GetAllAccounts calls moneydashboard.v4.MDAccountService.GetAllAccounts.
func (c *mDAccountServiceClient) GetAllAccounts(ctx context.Context, req *connect.Request[v4.GetAllAccountsRequest]) (*connect.Response[v4.GetAllAccountsResponse], error) {
	return c.getAllAccounts.CallUnary(ctx, req)
}

// UpsertAccount calls moneydashboard.v4.MDAccountService.UpsertAccount.
func (c *mDAccountServiceClient) UpsertAccount(ctx context.Context, req *connect.Request[v4.UpsertAccountRequest]) (*connect.Response[v4.UpsertAccountResponse], error) {
	return c.upsertAccount.CallUnary(ctx, req)
}

// MDAccountServiceHandler is an implementation of the moneydashboard.v4.MDAccountService service.
type MDAccountServiceHandler interface {
	GetAccountById(context.Context, *connect.Request[v4.GetAccountByIdRequest]) (*connect.Response[v4.GetAccountByIdResponse], error)
	GetAllAccounts(context.Context, *connect.Request[v4.GetAllAccountsRequest]) (*connect.Response[v4.GetAllAccountsResponse], error)
	UpsertAccount(context.Context, *connect.Request[v4.UpsertAccountRequest]) (*connect.Response[v4.UpsertAccountResponse], error)
}

// NewMDAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMDAccountServiceHandler(svc MDAccountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mDAccountServiceMethods := v4.File_moneydashboard_v4_accounts_proto.Services().ByName("MDAccountService").Methods()
	mDAccountServiceGetAccountByIdHandler := connect.NewUnaryHandler(
		MDAccountServiceGetAccountByIdProcedure,
		svc.GetAccountById,
		connect.WithSchema(mDAccountServiceMethods.ByName("GetAccountById")),
		connect.WithHandlerOptions(opts...),
	)
	mDAccountServiceGetAllAccountsHandler := connect.NewUnaryHandler(
		MDAccountServiceGetAllAccountsProcedure,
		svc.GetAllAccounts,
		connect.WithSchema(mDAccountServiceMethods.ByName("GetAllAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	mDAccountServiceUpsertAccountHandler := connect.NewUnaryHandler(
		MDAccountServiceUpsertAccountProcedure,
		svc.UpsertAccount,
		connect.WithSchema(mDAccountServiceMethods.ByName("UpsertAccount")),
		connect.WithHandlerOptions(opts...),
	)
	return "/moneydashboard.v4.MDAccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MDAccountServiceGetAccountByIdProcedure:
			mDAccountServiceGetAccountByIdHandler.ServeHTTP(w, r)
		case MDAccountServiceGetAllAccountsProcedure:
			mDAccountServiceGetAllAccountsHandler.ServeHTTP(w, r)
		case MDAccountServiceUpsertAccountProcedure:
			mDAccountServiceUpsertAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMDAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMDAccountServiceHandler struct{}

func (UnimplementedMDAccountServiceHandler) GetAccountById(context.Context, *connect.Request[v4.GetAccountByIdRequest]) (*connect.Response[v4.GetAccountByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDAccountService.GetAccountById is not implemented"))
}

func (UnimplementedMDAccountServiceHandler) GetAllAccounts(context.Context, *connect.Request[v4.GetAllAccountsRequest]) (*connect.Response[v4.GetAllAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDAccountService.GetAllAccounts is not implemented"))
}

func (UnimplementedMDAccountServiceHandler) UpsertAccount(context.Context, *connect.Request[v4.UpsertAccountRequest]) (*connect.Response[v4.UpsertAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDAccountService.UpsertAccount is not implemented"))
}
