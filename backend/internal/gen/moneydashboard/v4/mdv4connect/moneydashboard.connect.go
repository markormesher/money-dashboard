// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: moneydashboard/v4/moneydashboard.proto

package mdv4connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v4 "github.com/markormesher/money-dashboard/internal/gen/moneydashboard/v4"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MDServiceName is the fully-qualified name of the MDService service.
	MDServiceName = "moneydashboard.v4.MDService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MDServiceGetCurrentUserProcedure is the fully-qualified name of the MDService's GetCurrentUser
	// RPC.
	MDServiceGetCurrentUserProcedure = "/moneydashboard.v4.MDService/GetCurrentUser"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	mDServiceServiceDescriptor              = v4.File_moneydashboard_v4_moneydashboard_proto.Services().ByName("MDService")
	mDServiceGetCurrentUserMethodDescriptor = mDServiceServiceDescriptor.Methods().ByName("GetCurrentUser")
)

// MDServiceClient is a client for the moneydashboard.v4.MDService service.
type MDServiceClient interface {
	GetCurrentUser(context.Context, *connect.Request[v4.GetCurrentUserRequest]) (*connect.Response[v4.GetCurrentUserResponse], error)
}

// NewMDServiceClient constructs a client for the moneydashboard.v4.MDService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMDServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MDServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mDServiceClient{
		getCurrentUser: connect.NewClient[v4.GetCurrentUserRequest, v4.GetCurrentUserResponse](
			httpClient,
			baseURL+MDServiceGetCurrentUserProcedure,
			connect.WithSchema(mDServiceGetCurrentUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mDServiceClient implements MDServiceClient.
type mDServiceClient struct {
	getCurrentUser *connect.Client[v4.GetCurrentUserRequest, v4.GetCurrentUserResponse]
}

// GetCurrentUser calls moneydashboard.v4.MDService.GetCurrentUser.
func (c *mDServiceClient) GetCurrentUser(ctx context.Context, req *connect.Request[v4.GetCurrentUserRequest]) (*connect.Response[v4.GetCurrentUserResponse], error) {
	return c.getCurrentUser.CallUnary(ctx, req)
}

// MDServiceHandler is an implementation of the moneydashboard.v4.MDService service.
type MDServiceHandler interface {
	GetCurrentUser(context.Context, *connect.Request[v4.GetCurrentUserRequest]) (*connect.Response[v4.GetCurrentUserResponse], error)
}

// NewMDServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMDServiceHandler(svc MDServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mDServiceGetCurrentUserHandler := connect.NewUnaryHandler(
		MDServiceGetCurrentUserProcedure,
		svc.GetCurrentUser,
		connect.WithSchema(mDServiceGetCurrentUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/moneydashboard.v4.MDService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MDServiceGetCurrentUserProcedure:
			mDServiceGetCurrentUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMDServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMDServiceHandler struct{}

func (UnimplementedMDServiceHandler) GetCurrentUser(context.Context, *connect.Request[v4.GetCurrentUserRequest]) (*connect.Response[v4.GetCurrentUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("moneydashboard.v4.MDService.GetCurrentUser is not implemented"))
}
