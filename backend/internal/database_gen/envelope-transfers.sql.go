// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: envelope-transfers.sql

package database_gen

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/govalues/decimal"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteEnvelopeTransfer = `-- name: DeleteEnvelopeTransfer :exec
UPDATE envelope_transfer SET deleted = TRUE WHERE id = $1 AND profile_id = $2
`

type DeleteEnvelopeTransferParams struct {
	ID        uuid.UUID
	ProfileID uuid.UUID
}

func (q *Queries) DeleteEnvelopeTransfer(ctx context.Context, arg DeleteEnvelopeTransferParams) error {
	_, err := q.db.Exec(ctx, deleteEnvelopeTransfer, arg.ID, arg.ProfileID)
	return err
}

const getAllEnvelopeTransfers = `-- name: GetAllEnvelopeTransfers :many
SELECT
  envelope_transfer.id, envelope_transfer.date, envelope_transfer.amount, envelope_transfer.from_envelope_id, envelope_transfer.to_envelope_id, envelope_transfer.notes, envelope_transfer.profile_id, envelope_transfer.deleted,
  nullable_envelope_tranfer_from_envelope.envelope_transfer_id, nullable_envelope_tranfer_from_envelope.id, nullable_envelope_tranfer_from_envelope.name, nullable_envelope_tranfer_from_envelope.profile_id, nullable_envelope_tranfer_from_envelope.active,
  nullable_envelope_tranfer_to_envelope.envelope_transfer_id, nullable_envelope_tranfer_to_envelope.id, nullable_envelope_tranfer_to_envelope.name, nullable_envelope_tranfer_to_envelope.profile_id, nullable_envelope_tranfer_to_envelope.active,
  profile.id, profile.name, profile.deleted
FROM
  envelope_transfer
    JOIN nullable_envelope_tranfer_from_envelope ON envelope_transfer.id = nullable_envelope_tranfer_from_envelope.envelope_transfer_id
    JOIN nullable_envelope_tranfer_to_envelope ON envelope_transfer.id = nullable_envelope_tranfer_to_envelope.envelope_transfer_id
    JOIN profile ON envelope_transfer.profile_id = profile.id
WHERE
  profile.id = $1
  AND envelope_transfer.deleted = FALSE
`

type GetAllEnvelopeTransfersRow struct {
	EnvelopeTransfer                    EnvelopeTransfer
	NullableEnvelopeTranferFromEnvelope NullableEnvelopeTranferFromEnvelope
	NullableEnvelopeTranferToEnvelope   NullableEnvelopeTranferToEnvelope
	Profile                             Profile
}

func (q *Queries) GetAllEnvelopeTransfers(ctx context.Context, profileID uuid.UUID) ([]GetAllEnvelopeTransfersRow, error) {
	rows, err := q.db.Query(ctx, getAllEnvelopeTransfers, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllEnvelopeTransfersRow
	for rows.Next() {
		var i GetAllEnvelopeTransfersRow
		if err := rows.Scan(
			&i.EnvelopeTransfer.ID,
			&i.EnvelopeTransfer.Date,
			&i.EnvelopeTransfer.Amount,
			&i.EnvelopeTransfer.FromEnvelopeID,
			&i.EnvelopeTransfer.ToEnvelopeID,
			&i.EnvelopeTransfer.Notes,
			&i.EnvelopeTransfer.ProfileID,
			&i.EnvelopeTransfer.Deleted,
			&i.NullableEnvelopeTranferFromEnvelope.EnvelopeTransferID,
			&i.NullableEnvelopeTranferFromEnvelope.ID,
			&i.NullableEnvelopeTranferFromEnvelope.Name,
			&i.NullableEnvelopeTranferFromEnvelope.ProfileID,
			&i.NullableEnvelopeTranferFromEnvelope.Active,
			&i.NullableEnvelopeTranferToEnvelope.EnvelopeTransferID,
			&i.NullableEnvelopeTranferToEnvelope.ID,
			&i.NullableEnvelopeTranferToEnvelope.Name,
			&i.NullableEnvelopeTranferToEnvelope.ProfileID,
			&i.NullableEnvelopeTranferToEnvelope.Active,
			&i.Profile.ID,
			&i.Profile.Name,
			&i.Profile.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnvelopeTransferById = `-- name: GetEnvelopeTransferById :one
SELECT
  envelope_transfer.id, envelope_transfer.date, envelope_transfer.amount, envelope_transfer.from_envelope_id, envelope_transfer.to_envelope_id, envelope_transfer.notes, envelope_transfer.profile_id, envelope_transfer.deleted,
  nullable_envelope_tranfer_from_envelope.envelope_transfer_id, nullable_envelope_tranfer_from_envelope.id, nullable_envelope_tranfer_from_envelope.name, nullable_envelope_tranfer_from_envelope.profile_id, nullable_envelope_tranfer_from_envelope.active,
  nullable_envelope_tranfer_to_envelope.envelope_transfer_id, nullable_envelope_tranfer_to_envelope.id, nullable_envelope_tranfer_to_envelope.name, nullable_envelope_tranfer_to_envelope.profile_id, nullable_envelope_tranfer_to_envelope.active,
  profile.id, profile.name, profile.deleted
FROM
  envelope_transfer
    JOIN nullable_envelope_tranfer_from_envelope ON envelope_transfer.id = nullable_envelope_tranfer_from_envelope.envelope_transfer_id
    JOIN nullable_envelope_tranfer_to_envelope ON envelope_transfer.id = nullable_envelope_tranfer_to_envelope.envelope_transfer_id
    JOIN profile ON envelope_transfer.profile_id = profile.id
WHERE
  envelope_transfer.id = $1
  AND profile.id = $2
  AND envelope_transfer.deleted = FALSE
`

type GetEnvelopeTransferByIdParams struct {
	EnvelopeTransferID uuid.UUID
	ProfileID          uuid.UUID
}

type GetEnvelopeTransferByIdRow struct {
	EnvelopeTransfer                    EnvelopeTransfer
	NullableEnvelopeTranferFromEnvelope NullableEnvelopeTranferFromEnvelope
	NullableEnvelopeTranferToEnvelope   NullableEnvelopeTranferToEnvelope
	Profile                             Profile
}

func (q *Queries) GetEnvelopeTransferById(ctx context.Context, arg GetEnvelopeTransferByIdParams) (GetEnvelopeTransferByIdRow, error) {
	row := q.db.QueryRow(ctx, getEnvelopeTransferById, arg.EnvelopeTransferID, arg.ProfileID)
	var i GetEnvelopeTransferByIdRow
	err := row.Scan(
		&i.EnvelopeTransfer.ID,
		&i.EnvelopeTransfer.Date,
		&i.EnvelopeTransfer.Amount,
		&i.EnvelopeTransfer.FromEnvelopeID,
		&i.EnvelopeTransfer.ToEnvelopeID,
		&i.EnvelopeTransfer.Notes,
		&i.EnvelopeTransfer.ProfileID,
		&i.EnvelopeTransfer.Deleted,
		&i.NullableEnvelopeTranferFromEnvelope.EnvelopeTransferID,
		&i.NullableEnvelopeTranferFromEnvelope.ID,
		&i.NullableEnvelopeTranferFromEnvelope.Name,
		&i.NullableEnvelopeTranferFromEnvelope.ProfileID,
		&i.NullableEnvelopeTranferFromEnvelope.Active,
		&i.NullableEnvelopeTranferToEnvelope.EnvelopeTransferID,
		&i.NullableEnvelopeTranferToEnvelope.ID,
		&i.NullableEnvelopeTranferToEnvelope.Name,
		&i.NullableEnvelopeTranferToEnvelope.ProfileID,
		&i.NullableEnvelopeTranferToEnvelope.Active,
		&i.Profile.ID,
		&i.Profile.Name,
		&i.Profile.Deleted,
	)
	return i, err
}

const getEnvelopeTransferPageFilteredEntities = `-- name: GetEnvelopeTransferPageFilteredEntities :many
SELECT
  envelope_transfer.id, envelope_transfer.date, envelope_transfer.amount, envelope_transfer.from_envelope_id, envelope_transfer.to_envelope_id, envelope_transfer.notes, envelope_transfer.profile_id, envelope_transfer.deleted,
  nullable_envelope_tranfer_from_envelope.envelope_transfer_id, nullable_envelope_tranfer_from_envelope.id, nullable_envelope_tranfer_from_envelope.name, nullable_envelope_tranfer_from_envelope.profile_id, nullable_envelope_tranfer_from_envelope.active,
  nullable_envelope_tranfer_to_envelope.envelope_transfer_id, nullable_envelope_tranfer_to_envelope.id, nullable_envelope_tranfer_to_envelope.name, nullable_envelope_tranfer_to_envelope.profile_id, nullable_envelope_tranfer_to_envelope.active,
  profile.id, profile.name, profile.deleted
FROM
  envelope_transfer
    JOIN nullable_envelope_tranfer_from_envelope ON envelope_transfer.id = nullable_envelope_tranfer_from_envelope.envelope_transfer_id
    JOIN nullable_envelope_tranfer_to_envelope ON envelope_transfer.id = nullable_envelope_tranfer_to_envelope.envelope_transfer_id
    JOIN profile on envelope_transfer.profile_id = profile.id
WHERE
  (
    nullable_envelope_tranfer_from_envelope.name ~* $3
    OR nullable_envelope_tranfer_to_envelope.name ~* $3
    OR envelope_transfer.notes ~* $3
  )
  AND envelope_transfer.profile_id = $4
  AND envelope_transfer.deleted = FALSE
ORDER BY
  "date" DESC,
  nullable_envelope_tranfer_from_envelope.name DESC,
  nullable_envelope_tranfer_to_envelope.name DESC
LIMIT $1
OFFSET $2
`

type GetEnvelopeTransferPageFilteredEntitiesParams struct {
	Limit         int32
	Offset        int32
	SearchPattern pgtype.Text
	ProfileID     uuid.UUID
}

type GetEnvelopeTransferPageFilteredEntitiesRow struct {
	EnvelopeTransfer                    EnvelopeTransfer
	NullableEnvelopeTranferFromEnvelope NullableEnvelopeTranferFromEnvelope
	NullableEnvelopeTranferToEnvelope   NullableEnvelopeTranferToEnvelope
	Profile                             Profile
}

// making updates here? don't forget to update BOTH filtered queries
func (q *Queries) GetEnvelopeTransferPageFilteredEntities(ctx context.Context, arg GetEnvelopeTransferPageFilteredEntitiesParams) ([]GetEnvelopeTransferPageFilteredEntitiesRow, error) {
	rows, err := q.db.Query(ctx, getEnvelopeTransferPageFilteredEntities,
		arg.Limit,
		arg.Offset,
		arg.SearchPattern,
		arg.ProfileID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEnvelopeTransferPageFilteredEntitiesRow
	for rows.Next() {
		var i GetEnvelopeTransferPageFilteredEntitiesRow
		if err := rows.Scan(
			&i.EnvelopeTransfer.ID,
			&i.EnvelopeTransfer.Date,
			&i.EnvelopeTransfer.Amount,
			&i.EnvelopeTransfer.FromEnvelopeID,
			&i.EnvelopeTransfer.ToEnvelopeID,
			&i.EnvelopeTransfer.Notes,
			&i.EnvelopeTransfer.ProfileID,
			&i.EnvelopeTransfer.Deleted,
			&i.NullableEnvelopeTranferFromEnvelope.EnvelopeTransferID,
			&i.NullableEnvelopeTranferFromEnvelope.ID,
			&i.NullableEnvelopeTranferFromEnvelope.Name,
			&i.NullableEnvelopeTranferFromEnvelope.ProfileID,
			&i.NullableEnvelopeTranferFromEnvelope.Active,
			&i.NullableEnvelopeTranferToEnvelope.EnvelopeTransferID,
			&i.NullableEnvelopeTranferToEnvelope.ID,
			&i.NullableEnvelopeTranferToEnvelope.Name,
			&i.NullableEnvelopeTranferToEnvelope.ProfileID,
			&i.NullableEnvelopeTranferToEnvelope.Active,
			&i.Profile.ID,
			&i.Profile.Name,
			&i.Profile.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnvelopeTransferPageFilteredTotal = `-- name: GetEnvelopeTransferPageFilteredTotal :one
SELECT
  count(*)
FROM
  envelope_transfer
    JOIN nullable_envelope_tranfer_from_envelope ON envelope_transfer.id = nullable_envelope_tranfer_from_envelope.envelope_transfer_id
    JOIN nullable_envelope_tranfer_to_envelope ON envelope_transfer.id = nullable_envelope_tranfer_to_envelope.envelope_transfer_id
    JOIN profile on envelope_transfer.profile_id = profile.id
WHERE
  (
    nullable_envelope_tranfer_from_envelope.name ~* $1
    OR nullable_envelope_tranfer_to_envelope.name ~* $1
    OR envelope_transfer.notes ~* $1
  )
  AND envelope_transfer.profile_id = $2
  AND envelope_transfer.deleted = FALSE
`

type GetEnvelopeTransferPageFilteredTotalParams struct {
	SearchPattern pgtype.Text
	ProfileID     uuid.UUID
}

// making updates here? don't forget to update BOTH filtered queries
func (q *Queries) GetEnvelopeTransferPageFilteredTotal(ctx context.Context, arg GetEnvelopeTransferPageFilteredTotalParams) (int64, error) {
	row := q.db.QueryRow(ctx, getEnvelopeTransferPageFilteredTotal, arg.SearchPattern, arg.ProfileID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getEnvelopeTransferPageTotal = `-- name: GetEnvelopeTransferPageTotal :one
SELECT
  count(*)
FROM
  envelope_transfer
WHERE
  envelope_transfer.profile_id = $1
  AND envelope_transfer.deleted = FALSE
`

func (q *Queries) GetEnvelopeTransferPageTotal(ctx context.Context, profileID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getEnvelopeTransferPageTotal, profileID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const upsertEnvelopeTransfer = `-- name: UpsertEnvelopeTransfer :exec
INSERT INTO envelope_transfer (
  id,
  date,
  amount,
  from_envelope_id,
  to_envelope_id,
  notes,
  profile_id,
  deleted
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8
) ON CONFLICT (id) DO UPDATE SET
  id = $1,
  date = $2,
  amount = $3,
  from_envelope_id = $4,
  to_envelope_id = $5,
  notes = $6,
  profile_id = $7,
  deleted = $8
`

type UpsertEnvelopeTransferParams struct {
	ID             uuid.UUID
	Date           time.Time
	Amount         decimal.Decimal
	FromEnvelopeID *uuid.UUID
	ToEnvelopeID   *uuid.UUID
	Notes          string
	ProfileID      uuid.UUID
	Deleted        bool
}

func (q *Queries) UpsertEnvelopeTransfer(ctx context.Context, arg UpsertEnvelopeTransferParams) error {
	_, err := q.db.Exec(ctx, upsertEnvelopeTransfer,
		arg.ID,
		arg.Date,
		arg.Amount,
		arg.FromEnvelopeID,
		arg.ToEnvelopeID,
		arg.Notes,
		arg.ProfileID,
		arg.Deleted,
	)
	return err
}
