// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: currencies.sql

package database_gen

import (
	"context"

	"github.com/google/uuid"
)

const getAllCurrencies = `-- name: GetAllCurrencies :many
SELECT id, code, symbol, decimal_places, deleted FROM currency WHERE currency.deleted = FALSE
`

func (q *Queries) GetAllCurrencies(ctx context.Context) ([]Currency, error) {
	rows, err := q.db.Query(ctx, getAllCurrencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Currency
	for rows.Next() {
		var i Currency
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Symbol,
			&i.DecimalPlaces,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrencyById = `-- name: GetCurrencyById :one
SELECT id, code, symbol, decimal_places, deleted FROM currency WHERE currency.id = $1 AND currency.deleted = FALSE
`

func (q *Queries) GetCurrencyById(ctx context.Context, id uuid.UUID) (Currency, error) {
	row := q.db.QueryRow(ctx, getCurrencyById, id)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Symbol,
		&i.DecimalPlaces,
		&i.Deleted,
	)
	return i, err
}
