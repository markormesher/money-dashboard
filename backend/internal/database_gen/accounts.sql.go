// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package database_gen

import (
	"context"

	"github.com/google/uuid"
)

const getAccountById = `-- name: GetAccountById :one
SELECT
  account.id, account.name, account.notes, account.is_isa, account.is_pension, account.exclude_from_envelopes, account.profile_id, account.active, account.account_group_id, account.exclude_from_reports,
  account_group.id, account_group.name, account_group.display_order, account_group.profile_id,
  profile.id, profile.name, profile.deleted
FROM
  account
    JOIN account_group ON account.account_group_id = account_group.id
    JOIN profile ON account.profile_id = profile.id
WHERE
  account.id = $1
  AND profile.id = $2
`

type GetAccountByIdParams struct {
	AccountID uuid.UUID
	ProfileID uuid.UUID
}

type GetAccountByIdRow struct {
	Account      Account
	AccountGroup AccountGroup
	Profile      Profile
}

func (q *Queries) GetAccountById(ctx context.Context, arg GetAccountByIdParams) (GetAccountByIdRow, error) {
	row := q.db.QueryRow(ctx, getAccountById, arg.AccountID, arg.ProfileID)
	var i GetAccountByIdRow
	err := row.Scan(
		&i.Account.ID,
		&i.Account.Name,
		&i.Account.Notes,
		&i.Account.IsIsa,
		&i.Account.IsPension,
		&i.Account.ExcludeFromEnvelopes,
		&i.Account.ProfileID,
		&i.Account.Active,
		&i.Account.AccountGroupID,
		&i.Account.ExcludeFromReports,
		&i.AccountGroup.ID,
		&i.AccountGroup.Name,
		&i.AccountGroup.DisplayOrder,
		&i.AccountGroup.ProfileID,
		&i.Profile.ID,
		&i.Profile.Name,
		&i.Profile.Deleted,
	)
	return i, err
}

const getAllAccounts = `-- name: GetAllAccounts :many
SELECT
  account.id, account.name, account.notes, account.is_isa, account.is_pension, account.exclude_from_envelopes, account.profile_id, account.active, account.account_group_id, account.exclude_from_reports,
  account_group.id, account_group.name, account_group.display_order, account_group.profile_id,
  profile.id, profile.name, profile.deleted
FROM
  account
    JOIN account_group ON account.account_group_id = account_group.id
    JOIN profile ON account.profile_id = profile.id
WHERE
  profile.id = $1
`

type GetAllAccountsRow struct {
	Account      Account
	AccountGroup AccountGroup
	Profile      Profile
}

func (q *Queries) GetAllAccounts(ctx context.Context, profileID uuid.UUID) ([]GetAllAccountsRow, error) {
	rows, err := q.db.Query(ctx, getAllAccounts, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAccountsRow
	for rows.Next() {
		var i GetAllAccountsRow
		if err := rows.Scan(
			&i.Account.ID,
			&i.Account.Name,
			&i.Account.Notes,
			&i.Account.IsIsa,
			&i.Account.IsPension,
			&i.Account.ExcludeFromEnvelopes,
			&i.Account.ProfileID,
			&i.Account.Active,
			&i.Account.AccountGroupID,
			&i.Account.ExcludeFromReports,
			&i.AccountGroup.ID,
			&i.AccountGroup.Name,
			&i.AccountGroup.DisplayOrder,
			&i.AccountGroup.ProfileID,
			&i.Profile.ID,
			&i.Profile.Name,
			&i.Profile.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertAccount = `-- name: UpsertAccount :exec
INSERT INTO account (
  id,
  name,
  notes,
  is_isa,
  is_pension,
  exclude_from_envelopes,
  exclude_from_reports,
  account_group_id,
  profile_id,
  active
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10
) ON CONFLICT (id) DO UPDATE SET
  id = $1,
  name = $2,
  notes = $3,
  is_isa = $4,
  is_pension = $5,
  exclude_from_envelopes = $6,
  exclude_from_reports = $7,
  account_group_id = $8,
  profile_id = $9,
  active = $10
`

type UpsertAccountParams struct {
	ID                   uuid.UUID
	Name                 string
	Notes                string
	IsIsa                bool
	IsPension            bool
	ExcludeFromEnvelopes bool
	ExcludeFromReports   bool
	AccountGroupID       uuid.UUID
	ProfileID            uuid.UUID
	Active               bool
}

func (q *Queries) UpsertAccount(ctx context.Context, arg UpsertAccountParams) error {
	_, err := q.db.Exec(ctx, upsertAccount,
		arg.ID,
		arg.Name,
		arg.Notes,
		arg.IsIsa,
		arg.IsPension,
		arg.ExcludeFromEnvelopes,
		arg.ExcludeFromReports,
		arg.AccountGroupID,
		arg.ProfileID,
		arg.Active,
	)
	return err
}
