// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database_gen

import (
	"context"

	"github.com/google/uuid"
)

const getProfileById = `-- name: GetProfileById :one
SELECT id, name, deleted FROM profile WHERE profile.id = $1 AND profile.deleted = FALSE
`

func (q *Queries) GetProfileById(ctx context.Context, id uuid.UUID) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfileById, id)
	var i Profile
	err := row.Scan(&i.ID, &i.Name, &i.Deleted)
	return i, err
}

const getUserByExternalUsername = `-- name: GetUserByExternalUsername :one
SELECT id, external_username, display_name, deleted, active_profile_id FROM usr WHERE usr.external_username = $1 AND usr.deleted = FALSE
`

func (q *Queries) GetUserByExternalUsername(ctx context.Context, externalUsername string) (Usr, error) {
	row := q.db.QueryRow(ctx, getUserByExternalUsername, externalUsername)
	var i Usr
	err := row.Scan(
		&i.ID,
		&i.ExternalUsername,
		&i.DisplayName,
		&i.Deleted,
		&i.ActiveProfileID,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, external_username, display_name, deleted, active_profile_id FROM usr WHERE usr.id = $1 AND usr.deleted = FALSE
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (Usr, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i Usr
	err := row.Scan(
		&i.ID,
		&i.ExternalUsername,
		&i.DisplayName,
		&i.Deleted,
		&i.ActiveProfileID,
	)
	return i, err
}

const getUserProfiles = `-- name: GetUserProfiles :many
SELECT id, name, deleted FROM profile
WHERE
  profile.id IN (SELECT profile_id FROM user_profile_role WHERE user_id = $1)
  AND
  profile.deleted = FALSE
`

func (q *Queries) GetUserProfiles(ctx context.Context, userID uuid.UUID) ([]Profile, error) {
	rows, err := q.db.Query(ctx, getUserProfiles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(&i.ID, &i.Name, &i.Deleted); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setActiveProfile = `-- name: SetActiveProfile :exec
UPDATE
  usr
SET
  active_profile_id = $1
WHERE
  usr.id = $2
`

type SetActiveProfileParams struct {
	ActiveProfileID uuid.UUID
	ID              uuid.UUID
}

func (q *Queries) SetActiveProfile(ctx context.Context, arg SetActiveProfileParams) error {
	_, err := q.db.Exec(ctx, setActiveProfile, arg.ActiveProfileID, arg.ID)
	return err
}

const upsertProfile = `-- name: UpsertProfile :exec
INSERT INTO profile (
  id, name
) VALUES (
  $1, $2
) ON CONFLICT (id) DO UPDATE SET
  name = $2
`

type UpsertProfileParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpsertProfile(ctx context.Context, arg UpsertProfileParams) error {
	_, err := q.db.Exec(ctx, upsertProfile, arg.ID, arg.Name)
	return err
}

const upsertUser = `-- name: UpsertUser :exec
INSERT INTO usr (
  id, external_username, display_name
) VALUES (
  $1, $2, $3
) ON CONFLICT (id) DO UPDATE SET
  external_username = $2,
  display_name = $3
`

type UpsertUserParams struct {
	ID               uuid.UUID
	ExternalUsername string
	DisplayName      string
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) error {
	_, err := q.db.Exec(ctx, upsertUser, arg.ID, arg.ExternalUsername, arg.DisplayName)
	return err
}

const upsertUserProfileRole = `-- name: UpsertUserProfileRole :exec
INSERT INTO user_profile_role (
  user_id, profile_id, role
) VALUES (
  $1, $2, $3
) ON CONFLICT (user_id, profile_id) DO UPDATE SET
  role = $3
`

type UpsertUserProfileRoleParams struct {
	UserID    uuid.UUID
	ProfileID uuid.UUID
	Role      string
}

func (q *Queries) UpsertUserProfileRole(ctx context.Context, arg UpsertUserProfileRoleParams) error {
	_, err := q.db.Exec(ctx, upsertUserProfileRole, arg.UserID, arg.ProfileID, arg.Role)
	return err
}
