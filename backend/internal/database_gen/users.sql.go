// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database_gen

import (
	"context"

	"github.com/google/uuid"
)

const getUserByExternalUsername = `-- name: GetUserByExternalUsername :one
SELECT id, external_username, display_name, deleted, active_profile_id FROM usr WHERE usr.external_username = $1 AND usr.deleted = FALSE
`

func (q *Queries) GetUserByExternalUsername(ctx context.Context, externalUsername string) (Usr, error) {
	row := q.db.QueryRow(ctx, getUserByExternalUsername, externalUsername)
	var i Usr
	err := row.Scan(
		&i.ID,
		&i.ExternalUsername,
		&i.DisplayName,
		&i.Deleted,
		&i.ActiveProfileID,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, external_username, display_name, deleted, active_profile_id FROM usr WHERE usr.id = $1 AND usr.deleted = FALSE
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (Usr, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i Usr
	err := row.Scan(
		&i.ID,
		&i.ExternalUsername,
		&i.DisplayName,
		&i.Deleted,
		&i.ActiveProfileID,
	)
	return i, err
}

const setActiveProfile = `-- name: SetActiveProfile :exec
UPDATE
  usr
SET
  active_profile_id = $1
WHERE
  usr.id = $2
`

type SetActiveProfileParams struct {
	ActiveProfileID *uuid.UUID
	ID              uuid.UUID
}

func (q *Queries) SetActiveProfile(ctx context.Context, arg SetActiveProfileParams) error {
	_, err := q.db.Exec(ctx, setActiveProfile, arg.ActiveProfileID, arg.ID)
	return err
}

const upsertUser = `-- name: UpsertUser :exec
INSERT INTO usr (
  id, external_username, display_name
) VALUES (
  $1, $2, $3
) ON CONFLICT (id) DO UPDATE SET
  external_username = $2,
  display_name = $3
`

type UpsertUserParams struct {
	ID               uuid.UUID
	ExternalUsername string
	DisplayName      string
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) error {
	_, err := q.db.Exec(ctx, upsertUser, arg.ID, arg.ExternalUsername, arg.DisplayName)
	return err
}
