// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account-groups.sql

package database_gen

import (
	"context"

	"github.com/google/uuid"
)

const getAccountGroupById = `-- name: GetAccountGroupById :one
SELECT
  account_group.id, account_group.name, account_group.display_order, account_group.profile_id,
  profile.id, profile.name, profile.deleted
FROM
  account_group
    JOIN profile ON account_group.profile_id = profile.id
WHERE
  account_group.id = $1
  AND profile.id = $2
`

type GetAccountGroupByIdParams struct {
	AccountGroupID uuid.UUID
	ProfileID      uuid.UUID
}

type GetAccountGroupByIdRow struct {
	AccountGroup AccountGroup
	Profile      Profile
}

func (q *Queries) GetAccountGroupById(ctx context.Context, arg GetAccountGroupByIdParams) (GetAccountGroupByIdRow, error) {
	row := q.db.QueryRow(ctx, getAccountGroupById, arg.AccountGroupID, arg.ProfileID)
	var i GetAccountGroupByIdRow
	err := row.Scan(
		&i.AccountGroup.ID,
		&i.AccountGroup.Name,
		&i.AccountGroup.DisplayOrder,
		&i.AccountGroup.ProfileID,
		&i.Profile.ID,
		&i.Profile.Name,
		&i.Profile.Deleted,
	)
	return i, err
}

const getAllAccountGroups = `-- name: GetAllAccountGroups :many
SELECT
  account_group.id, account_group.name, account_group.display_order, account_group.profile_id,
  profile.id, profile.name, profile.deleted
FROM
  account_group
    JOIN profile ON account_group.profile_id = profile.id
WHERE
  profile.id = $1
`

type GetAllAccountGroupsRow struct {
	AccountGroup AccountGroup
	Profile      Profile
}

func (q *Queries) GetAllAccountGroups(ctx context.Context, profileID uuid.UUID) ([]GetAllAccountGroupsRow, error) {
	rows, err := q.db.Query(ctx, getAllAccountGroups, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAccountGroupsRow
	for rows.Next() {
		var i GetAllAccountGroupsRow
		if err := rows.Scan(
			&i.AccountGroup.ID,
			&i.AccountGroup.Name,
			&i.AccountGroup.DisplayOrder,
			&i.AccountGroup.ProfileID,
			&i.Profile.ID,
			&i.Profile.Name,
			&i.Profile.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertAccountGroup = `-- name: UpsertAccountGroup :exec
INSERT INTO account_group (
  id,
  name,
  display_order,
  profile_id
) VALUES (
  $1,
  $2,
  $3,
  $4
) ON CONFLICT (id) DO UPDATE SET
  id = $1,
  name = $2,
  display_order = $3,
  profile_id = $4
`

type UpsertAccountGroupParams struct {
	ID           uuid.UUID
	Name         string
	DisplayOrder int32
	ProfileID    uuid.UUID
}

func (q *Queries) UpsertAccountGroup(ctx context.Context, arg UpsertAccountGroupParams) error {
	_, err := q.db.Exec(ctx, upsertAccountGroup,
		arg.ID,
		arg.Name,
		arg.DisplayOrder,
		arg.ProfileID,
	)
	return err
}
