// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: holdings.sql

package database_gen

import (
	"context"

	"github.com/google/uuid"
)

const getAllHoldingsForProfile = `-- name: GetAllHoldingsForProfile :many
SELECT
  holding.id, holding.name, holding.currency_id, holding.asset_id, holding.account_id, holding.profile_id, holding.active,
  --sqlc.embed(currency),
  --sqlc.embed(asset),
  account.id, account.name, account.notes, account.is_isa, account.is_pension, account.exclude_from_envelopes, account.profile_id, account.active,
  profile.id, profile.name, profile.deleted
FROM
  holding
    --LEFT JOIN currency on holding.currency_id = currency.id
    --LEFT JOIN asset on holding.asset_id = asset.id
    JOIN account on holding.account_id = account.id
    JOIN profile on holding.profile_id = profile.id
WHERE
  profile.id = $1
`

type GetAllHoldingsForProfileRow struct {
	Holding Holding
	Account Account
	Profile Profile
}

func (q *Queries) GetAllHoldingsForProfile(ctx context.Context, profileID uuid.UUID) ([]GetAllHoldingsForProfileRow, error) {
	rows, err := q.db.Query(ctx, getAllHoldingsForProfile, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllHoldingsForProfileRow
	for rows.Next() {
		var i GetAllHoldingsForProfileRow
		if err := rows.Scan(
			&i.Holding.ID,
			&i.Holding.Name,
			&i.Holding.CurrencyID,
			&i.Holding.AssetID,
			&i.Holding.AccountID,
			&i.Holding.ProfileID,
			&i.Holding.Active,
			&i.Account.ID,
			&i.Account.Name,
			&i.Account.Notes,
			&i.Account.IsIsa,
			&i.Account.IsPension,
			&i.Account.ExcludeFromEnvelopes,
			&i.Account.ProfileID,
			&i.Account.Active,
			&i.Profile.ID,
			&i.Profile.Name,
			&i.Profile.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHoldingById = `-- name: GetHoldingById :one
SELECT
  holding.id, holding.name, holding.currency_id, holding.asset_id, holding.account_id, holding.profile_id, holding.active,
  --sqlc.embed(currency),
  --sqlc.embed(asset),
  account.id, account.name, account.notes, account.is_isa, account.is_pension, account.exclude_from_envelopes, account.profile_id, account.active,
  profile.id, profile.name, profile.deleted
FROM
  holding
    --LEFT JOIN currency on holding.currency_id = currency.id
    --LEFT JOIN asset on holding.asset_id = asset.id
    JOIN account on holding.account_id = account.id
    JOIN profile on holding.profile_id = profile.id
WHERE
  holding.id = $1
  AND profile.id = $2
`

type GetHoldingByIdParams struct {
	HoldingID uuid.UUID
	ProfileID uuid.UUID
}

type GetHoldingByIdRow struct {
	Holding Holding
	Account Account
	Profile Profile
}

func (q *Queries) GetHoldingById(ctx context.Context, arg GetHoldingByIdParams) (GetHoldingByIdRow, error) {
	row := q.db.QueryRow(ctx, getHoldingById, arg.HoldingID, arg.ProfileID)
	var i GetHoldingByIdRow
	err := row.Scan(
		&i.Holding.ID,
		&i.Holding.Name,
		&i.Holding.CurrencyID,
		&i.Holding.AssetID,
		&i.Holding.AccountID,
		&i.Holding.ProfileID,
		&i.Holding.Active,
		&i.Account.ID,
		&i.Account.Name,
		&i.Account.Notes,
		&i.Account.IsIsa,
		&i.Account.IsPension,
		&i.Account.ExcludeFromEnvelopes,
		&i.Account.ProfileID,
		&i.Account.Active,
		&i.Profile.ID,
		&i.Profile.Name,
		&i.Profile.Deleted,
	)
	return i, err
}

const upsertHolding = `-- name: UpsertHolding :exec
INSERT INTO holding (
  id,
  name,
  currency_id,
  asset_id,
  account_id,
  profile_id,
  active
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7
) ON CONFLICT (id) DO UPDATE SET
  id = $1,
  name = $2,
  currency_id = $3,
  asset_id = $4,
  account_id = $5,
  profile_id = $6,
  active = $7
`

type UpsertHoldingParams struct {
	ID         uuid.UUID
	Name       string
	CurrencyID *uuid.UUID
	AssetID    *uuid.UUID
	AccountID  uuid.UUID
	ProfileID  uuid.UUID
	Active     bool
}

func (q *Queries) UpsertHolding(ctx context.Context, arg UpsertHoldingParams) error {
	_, err := q.db.Exec(ctx, upsertHolding,
		arg.ID,
		arg.Name,
		arg.CurrencyID,
		arg.AssetID,
		arg.AccountID,
		arg.ProfileID,
		arg.Active,
	)
	return err
}
