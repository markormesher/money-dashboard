// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: assets.sql

package database_gen

import (
	"context"

	"github.com/google/uuid"
)

const getAllAssets = `-- name: GetAllAssets :many
SELECT
  asset.id, asset.name, asset.notes, asset.display_precision, asset.calculation_precision, asset.currency_id, asset.active,
  currency.id, currency.code, currency.symbol, currency.display_precision, currency.active, currency.calculation_precision
FROM
  asset JOIN currency on asset.currency_id = currency.id
`

type GetAllAssetsRow struct {
	Asset    Asset
	Currency Currency
}

func (q *Queries) GetAllAssets(ctx context.Context) ([]GetAllAssetsRow, error) {
	rows, err := q.db.Query(ctx, getAllAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAssetsRow
	for rows.Next() {
		var i GetAllAssetsRow
		if err := rows.Scan(
			&i.Asset.ID,
			&i.Asset.Name,
			&i.Asset.Notes,
			&i.Asset.DisplayPrecision,
			&i.Asset.CalculationPrecision,
			&i.Asset.CurrencyID,
			&i.Asset.Active,
			&i.Currency.ID,
			&i.Currency.Code,
			&i.Currency.Symbol,
			&i.Currency.DisplayPrecision,
			&i.Currency.Active,
			&i.Currency.CalculationPrecision,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssetById = `-- name: GetAssetById :one
SELECT
  asset.id, asset.name, asset.notes, asset.display_precision, asset.calculation_precision, asset.currency_id, asset.active,
  currency.id, currency.code, currency.symbol, currency.display_precision, currency.active, currency.calculation_precision
FROM
  asset JOIN currency on asset.currency_id = currency.id
WHERE
  asset.id = $1
`

type GetAssetByIdRow struct {
	Asset    Asset
	Currency Currency
}

func (q *Queries) GetAssetById(ctx context.Context, id uuid.UUID) (GetAssetByIdRow, error) {
	row := q.db.QueryRow(ctx, getAssetById, id)
	var i GetAssetByIdRow
	err := row.Scan(
		&i.Asset.ID,
		&i.Asset.Name,
		&i.Asset.Notes,
		&i.Asset.DisplayPrecision,
		&i.Asset.CalculationPrecision,
		&i.Asset.CurrencyID,
		&i.Asset.Active,
		&i.Currency.ID,
		&i.Currency.Code,
		&i.Currency.Symbol,
		&i.Currency.DisplayPrecision,
		&i.Currency.Active,
		&i.Currency.CalculationPrecision,
	)
	return i, err
}

const upsertAsset = `-- name: UpsertAsset :exec
INSERT INTO asset (
  id, name, notes, display_precision, calculation_precision, currency_id, active
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) ON CONFLICT (id) DO UPDATE SET
  name = $2,
  notes = $3,
  display_precision = $4,
  calculation_precision = $5,
  currency_id = $6,
  active = $7
`

type UpsertAssetParams struct {
	ID                   uuid.UUID
	Name                 string
	Notes                string
	DisplayPrecision     int32
	CalculationPrecision int32
	CurrencyID           uuid.UUID
	Active               bool
}

func (q *Queries) UpsertAsset(ctx context.Context, arg UpsertAssetParams) error {
	_, err := q.db.Exec(ctx, upsertAsset,
		arg.ID,
		arg.Name,
		arg.Notes,
		arg.DisplayPrecision,
		arg.CalculationPrecision,
		arg.CurrencyID,
		arg.Active,
	)
	return err
}
