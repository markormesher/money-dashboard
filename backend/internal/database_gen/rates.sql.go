// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rates.sql

package database_gen

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/govalues/decimal"
)

const getHistoricRate = `-- name: GetHistoricRate :one
SELECT id, asset_id, currency_id, date, rate FROM rate
WHERE
  (
    asset_id = $1
    OR currency_id = $1
  )
  AND "date" <= $2
ORDER BY "date" DESC
LIMIT 1
`

type GetHistoricRateParams struct {
	AssetOrCurrenceyID *uuid.UUID
	Date               time.Time
}

func (q *Queries) GetHistoricRate(ctx context.Context, arg GetHistoricRateParams) (Rate, error) {
	row := q.db.QueryRow(ctx, getHistoricRate, arg.AssetOrCurrenceyID, arg.Date)
	var i Rate
	err := row.Scan(
		&i.ID,
		&i.AssetID,
		&i.CurrencyID,
		&i.Date,
		&i.Rate,
	)
	return i, err
}

const getLatestRates = `-- name: GetLatestRates :many
SELECT
  DISTINCT ON (asset_id, currency_id) id, asset_id, currency_id, date, rate
FROM
  rate
ORDER BY asset_id, currency_id, "date" DESC
`

func (q *Queries) GetLatestRates(ctx context.Context) ([]Rate, error) {
	rows, err := q.db.Query(ctx, getLatestRates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rate
	for rows.Next() {
		var i Rate
		if err := rows.Scan(
			&i.ID,
			&i.AssetID,
			&i.CurrencyID,
			&i.Date,
			&i.Rate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertRate = `-- name: UpsertRate :exec
INSERT INTO rate (
  id, asset_id, currency_id, "date", rate
) VALUES (
  $1, $2, $3, $4, $5
) ON CONFLICT (asset_id, currency_id, "date") DO UPDATE SET
  rate = $5
`

type UpsertRateParams struct {
	ID         uuid.UUID
	AssetID    *uuid.UUID
	CurrencyID *uuid.UUID
	Date       time.Time
	Rate       decimal.Decimal
}

func (q *Queries) UpsertRate(ctx context.Context, arg UpsertRateParams) error {
	_, err := q.db.Exec(ctx, upsertRate,
		arg.ID,
		arg.AssetID,
		arg.CurrencyID,
		arg.Date,
		arg.Rate,
	)
	return err
}
