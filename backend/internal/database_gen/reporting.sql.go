// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reporting.sql

package database_gen

import (
	"context"

	"github.com/google/uuid"
	"github.com/govalues/decimal"
)

const getHoldingBalances = `-- name: GetHoldingBalances :many
SELECT
  CAST(SUM(transaction.amount) AS NUMERIC(19, 4)) AS balance,
  transaction.holding_id
FROM
  transaction
WHERE
  transaction.profile_id = $1
  AND transaction.deleted = FALSE
GROUP BY transaction.holding_id
`

type GetHoldingBalancesRow struct {
	Balance   decimal.Decimal
	HoldingID uuid.UUID
}

func (q *Queries) GetHoldingBalances(ctx context.Context, profileID uuid.UUID) ([]GetHoldingBalancesRow, error) {
	rows, err := q.db.Query(ctx, getHoldingBalances, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHoldingBalancesRow
	for rows.Next() {
		var i GetHoldingBalancesRow
		if err := rows.Scan(&i.Balance, &i.HoldingID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMemoBalances = `-- name: GetMemoBalances :many
SELECT
  CAST(SUM(transaction.amount) AS NUMERIC(19, 4)) AS balance,
  holding.asset_id,
  holding.currency_id,
  transaction.category_id
FROM
  transaction
    JOIN holding ON transaction.holding_id = holding.id
    JOIN category ON transaction.category_id = category.id
WHERE
  transaction.profile_id = $1
  AND transaction.deleted = FALSE
  AND category.is_memo = TRUE
GROUP BY holding.asset_id, holding.currency_id, transaction.category_id
`

type GetMemoBalancesRow struct {
	Balance    decimal.Decimal
	AssetID    *uuid.UUID
	CurrencyID *uuid.UUID
	CategoryID uuid.UUID
}

func (q *Queries) GetMemoBalances(ctx context.Context, profileID uuid.UUID) ([]GetMemoBalancesRow, error) {
	rows, err := q.db.Query(ctx, getMemoBalances, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMemoBalancesRow
	for rows.Next() {
		var i GetMemoBalancesRow
		if err := rows.Scan(
			&i.Balance,
			&i.AssetID,
			&i.CurrencyID,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
