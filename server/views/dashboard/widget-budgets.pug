-
	var formatCurrency = formatters.formatCurrency;
	var getBudgetPeriodType = formatters.getBudgetPeriodType;
	var formatBudgetPeriod = formatters.formatBudgetPeriod;

	var budgetBalances = locals.budgetBalances || [];
	var budgetPeriodSortOrder = {
		'month': 0,
		'calendar year': 1,
		'tax year': 2,
		'other': 3
	};

	// pre-process budgets into their period types (month, year, etc.)
	var groupedBudgets = {};
	var periods = [];
	budgetBalances.forEach(bb => {
		var period = [bb.budget.startDate, bb.budget.endDate];
		if (!groupedBudgets[period]) {
			periods.push(period);
			groupedBudgets[period] = { budgets: [], bills: [] };
		}
		if (bb.budget.type == 'budget') {
			groupedBudgets[period].budgets.push(bb);
		} else {
			groupedBudgets[period].bills.push(bb);
		}
	});

	// sort groups into display order (month, year, tax year, other)
	function comparePeriods(a, b) {
		var aType = getBudgetPeriodType(a[0], a[1]);
		var bType = getBudgetPeriodType(b[0], b[1]);
		return budgetPeriodSortOrder[aType] - budgetPeriodSortOrder[bType];
	}
	periods.sort(comparePeriods);

mixin budgetOrBill(budgetBalance)
	-
		var budget = budgetBalance.budget;
		var spend = budgetBalance.balance * -1;
		var percentSpent = spend / budget.amount;
		var width = percentSpent > 0 ? Math.min(100, percentSpent * 100) + '%' : '1px';

		var tooltip = `Spent ${formatCurrency(spend, false)} of ${formatCurrency(budget.amount, false)}`;

		let barClass = 'info';
		let barIcon = null;
		let barMsg = null;
		if (budget.type == 'budget') {
			if (percentSpent > 1.0) {
				barClass = 'danger';
				barIcon = 'exclamation-triangle';
			} else if (percentSpent > 0.8) {
				barClass = 'warning';
				barIcon = 'exclamation-triangle';
			}
		} else {
			if (percentSpent > 1.05) {
				barClass = 'danger';
				barIcon = 'exclamation-triangle';
				barMsg = `Overpaid: ${formatCurrency(spend, false)}`;
			} else if (percentSpent > 1) {
				barClass = 'warning';
				barIcon = 'exclamation-triangle';
				barMsg = `Overpaid: ${formatCurrency(spend, false)}`;
			} else if (percentSpent > 0.9) {
				barClass = 'success';
				barIcon = 'check-circle';
				barMsg = `Paid ${formatCurrency(spend, false)}`;
			}
		}

	div.col-md-4.col-xs-12
		p: strong= budget.category.name
		div.progress(title = tooltip, data-toggle = 'tooltip')
			div.progress-bar(style = `width: ${width};`, class = `progress-bar-${barClass}`)
				if (barIcon != null)
					span: i.far.fa-fw(class = `fa-${barIcon}`)
				if (barMsg != null)
					span= barMsg


each period in periods

	-
		function compareBudgetBalances(a, b) {
			return a.budget.category.name.localeCompare(b.budget.category.name);
		}
		var budgetBalances = groupedBudgets[period].budgets.sort(compareBudgetBalances);
		var billBalances = groupedBudgets[period].bills.sort(compareBudgetBalances);

	div.x_panel
		div.x_title
			h2
				i.far.fa-fw.fa-chart-pie
				| #{formatBudgetPeriod(period[0], period[1])}
			div.clearfix

		div.x_content
			if (budgetBalances.length > 0)
				div.row
					each budgetBalance in budgetBalances
						+budgetOrBill(budgetBalance)

			if (budgetBalances.length > 0 && billBalances.length > 0)
				div.row: div.col-xs-12: div.hr: hr

			if (billBalances.length > 0)
				div.row
					each billBalance in billBalances
						+budgetOrBill(billBalance)
